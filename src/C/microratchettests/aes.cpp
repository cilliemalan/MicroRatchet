#include "pch.h"
#include <microratchet.h>
#include "support.h"

static mr_config _cfg{ 1000, 1 };

TEST(Aes, Create) {
	auto mr_ctx = mrclient_create(&_cfg);
	auto aes = mr_aes_create(mr_ctx);
	EXPECT_NE(nullptr, aes);

	mr_aes_destroy(aes);
	mrclient_destroy(mr_ctx);
}

TEST(Aes, Init256) {
	const unsigned char key[]{
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
		0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
		0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	};

	auto mr_ctx = mrclient_create(&_cfg);
	auto aes = mr_aes_create(mr_ctx);
	EXPECT_NE(nullptr, aes);
	int result = call_and_wait(mr_aes_init, mr_ctx, aes, key, (unsigned int)sizeof(key));
	EXPECT_EQ(E_SUCCESS, result);

	mr_aes_destroy(aes);
	mrclient_destroy(mr_ctx);
}

TEST(Aes, Init128) {
	const unsigned char key[]{
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
		0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
	};

	auto mr_ctx = mrclient_create(&_cfg);
	auto aes = mr_aes_create(mr_ctx);
	EXPECT_NE(nullptr, aes);
	int result = call_and_wait(mr_aes_init, mr_ctx, aes, key, (unsigned int)sizeof(key));
	EXPECT_EQ(E_SUCCESS, result);

	mr_aes_destroy(aes);
	mrclient_destroy(mr_ctx);
}

void processTestInternal(
	const unsigned char* key, unsigned int keysize,
	const unsigned char* input, unsigned int inputsize,
	const unsigned char* expected, unsigned int expectedsize)
{
	unsigned char* output = new unsigned char[inputsize];
	unsigned int outputsize = inputsize;
	auto mr_ctx = mrclient_create(&_cfg);
	auto aes = mr_aes_create(mr_ctx);
	EXPECT_NE(nullptr, aes);
	int result = call_and_wait(mr_aes_init, mr_ctx, aes, key, keysize);
	EXPECT_EQ(E_SUCCESS, result);
	result = call_and_wait(mr_aes_process, mr_ctx, aes, input, inputsize, output, outputsize);
	EXPECT_EQ(E_SUCCESS, result);
	EXPECT_BUFFEREQ(output, sizeof(output), expected, sizeof(expected));

	mr_aes_destroy(aes);
	mrclient_destroy(mr_ctx);
	delete[] output;
}

void processTest(
	const unsigned char* key, unsigned int keysize,
	const unsigned char* input, unsigned int inputsize,
	const unsigned char* expected, unsigned int expectedsize)
{
	processTestInternal(key, keysize, input, inputsize, expected, expectedsize);
	processTestInternal(key, keysize, expected, expectedsize, input, inputsize);
}

TEST(Aes, Process256) {
	const unsigned char key[]{
		0x07, 0x45, 0x19, 0x3f, 0x99, 0x2f, 0x6f, 0x7e,
		0xa2, 0xfb, 0x7d, 0xdb, 0xa0, 0x82, 0x85, 0x71,
		0xdc, 0xc9, 0x8c, 0xb5, 0x82, 0xdd, 0x05, 0xe1,
		0xd0, 0x26, 0x57, 0x7a, 0x92, 0xb1, 0x56, 0x99
	};
	const unsigned char input[]{
		1, 2, 3, 4, 5, 6, 7, 8
	};
	const unsigned char expected[]{
		0x7c, 0x06, 0xcc, 0xe2, 0x24, 0x3b, 0xda, 0x53
	};

	processTest(key, sizeof(key), input, sizeof(input), expected, sizeof(expected));
}

TEST(Aes, Process256Reverse) {
	const unsigned char key[]{
		0x07, 0x45, 0x19, 0x3f, 0x99, 0x2f, 0x6f, 0x7e,
		0xa2, 0xfb, 0x7d, 0xdb, 0xa0, 0x82, 0x85, 0x71,
		0xdc, 0xc9, 0x8c, 0xb5, 0x82, 0xdd, 0x05, 0xe1,
		0xd0, 0x26, 0x57, 0x7a, 0x92, 0xb1, 0x56, 0x99
	};
	const unsigned char expected[]{
		1, 2, 3, 4, 5, 6, 7, 8
	};
	const unsigned char input[]{
		0x7c, 0x06, 0xcc, 0xe2, 0x24, 0x3b, 0xda, 0x53
	};

	processTest(key, sizeof(key), input, sizeof(input), expected, sizeof(expected));
}

TEST(Aes, Process128) {
	const unsigned char key[]{
		0x06, 0x19, 0x3f, 0x99, 0x2f, 0xdc, 0xc9, 0x8c,
		0xb5, 0x82, 0xdd, 0x05, 0xe1, 0xd0, 0x26, 0x99
	};
	const unsigned char input[]{
		1, 2, 3, 4, 5, 6, 7, 8
	};
	const unsigned char expected[]{
		0xa7, 0x93, 0xaf, 0xc8, 0x3b, 0x08, 0x87, 0x5d
	};

	processTest(key, sizeof(key), input, sizeof(input), expected, sizeof(expected));
}

TEST(Aes, Process128Reverse) {
	const unsigned char key[]{
		0x06, 0x19, 0x3f, 0x99, 0x2f, 0xdc, 0xc9, 0x8c,
		0xb5, 0x82, 0xdd, 0x05, 0xe1, 0xd0, 0x26, 0x99
	};
	const unsigned char expected[]{
		1, 2, 3, 4, 5, 6, 7, 8
	};
	const unsigned char input[]{
		0xa7, 0x93, 0xaf, 0xc8, 0x3b, 0x08, 0x87, 0x5d
	};

	processTest(key, sizeof(key), input, sizeof(input), expected, sizeof(expected));
}

TEST(Aes, ProcessBlank256) {
	const unsigned char key[]{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	const unsigned char input[]{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	};
	const unsigned char expected[]{
		0xdc, 0x95, 0xc0, 0x78, 0xa2, 0x40, 0x89, 0x89
	};

	processTest(key, sizeof(key), input, sizeof(input), expected, sizeof(expected));
}

TEST(Aes, ProcessBlank128) {
	const unsigned char key[]{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	const unsigned char input[]{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	const unsigned char expected[]{
		0x66, 0xe9, 0x4b, 0xd4, 0xef, 0x8a, 0x2c, 0x3b
	};

	processTest(key, sizeof(key), input, sizeof(input), expected, sizeof(expected));
}

TEST(Aes, ReferenceTest1) {
	const unsigned char key[]{
		0x07, 0x0a, 0x0b, 0x0c, 0x0d, 0x07, 0x45, 0x19, 0x3f, 0x99, 0x2f, 0x6f, 0x7e, 0xa2, 0xfb, 0x71
	};
	const unsigned char input[]{
		0xe2, 0xc0, 0x8b, 0x2c, 0xaa, 0xc1, 0x4c, 0x46, 0xc8, 0x85, 0xc7, 0xb2, 0x1e, 0x24, 0xf6, 0x7d
	};
	const unsigned char expected[]{
		0x8d, 0x0e, 0x1d, 0x3a, 0xff, 0xf9, 0x72, 0x5f, 0xa9, 0xf0, 0xee, 0x58, 0x63, 0x82, 0x4d, 0x07
	};

	processTest(key, sizeof(key), input, sizeof(input), expected, sizeof(expected));
}

TEST(Aes, ReferenceTest2) {
	const unsigned char key[]{
		0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x07, 0x45, 0x19, 0x3f, 0x99, 0x2f, 0x6f, 0x7e, 0xa2, 0xfb, 0x71
	};
	const unsigned char input[]{
		0x3d, 0xde, 0xd7, 0x5d, 0x30, 0x4e, 0x18, 0x5c, 0xb7, 0xf9, 0x9b, 0xe2, 0xac, 0x97, 0x91, 0x3f
	};
	const unsigned char expected[]{
		0x21, 0xa5, 0x77, 0xd9, 0xf9, 0xb5, 0x13, 0x3a, 0x7f, 0x28, 0xbc, 0x41, 0x03, 0x6c, 0xda, 0xfd
	};

	processTest(key, sizeof(key), input, sizeof(input), expected, sizeof(expected));
}

TEST(Aes, ReferenceTest3) {
	const unsigned char key[]{
		0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x07, 0x45, 0x19, 0x3f, 0x99, 0x2f, 0x6f, 0x7e, 0xa2, 0xfb, 0x7d, 0xdb, 0xa0, 0x82, 0x85, 0x71
	};
	const unsigned char input[]{
		0x3d, 0xde, 0xd7, 0x5d, 0x30, 0x4e, 0x18, 0x5c, 0xb7, 0xf9, 0x9b, 0xe2, 0xac, 0x97, 0x91, 0x3f
	};
	const unsigned char expected[]{
		0x63, 0x09, 0x94, 0xb9, 0x2d, 0xa2, 0xcf, 0x94, 0x2c, 0xc1, 0x08, 0xdc, 0x8e, 0x18, 0xa5, 0xec
	};

	processTest(key, sizeof(key), input, sizeof(input), expected, sizeof(expected));
}

TEST(Aes, ReferenceTest4) {
	const unsigned char key[]{
		0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x07, 0x45, 0x19, 0x3f, 0x99, 0x2f, 0x6f, 0x7e, 0xa2, 0xfb, 0x7d, 0xdb, 0xa0, 0x82, 0x85, 0x71
	};
	const unsigned char input[]{
		0xe2, 0xc0, 0x8b, 0x2c, 0xaa, 0xc1, 0x4c, 0x46, 0xc8, 0x85, 0xc7, 0xb2, 0x1e, 0x24, 0xf6, 0x7d
	};
	const unsigned char expected[]{
		0xbc, 0x17, 0xc8, 0xc8, 0xb7, 0x2d, 0x9b, 0x8e, 0x53, 0xbd, 0x54, 0x8c, 0x3c, 0xab, 0xc2, 0xae
	};

	processTest(key, sizeof(key), input, sizeof(input), expected, sizeof(expected));
}
