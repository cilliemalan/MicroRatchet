using MicroRatchet.BouncyCastle;
using System;
using System.Collections;
using System.Diagnostics;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using Xunit;

namespace MicroRatchet.Tests
{
    public class EcdhRatchetTests
    {
        private AesKdf kdf = new AesKdf(Common.AesFactory);
        private Digest digest = new Digest();
        private RandomNumberGenerator rng = new RandomNumberGenerator();
        private IKeyAgreementFactory kaf = new DefaultServices(KeyGeneration.GeneratePrivateKey(), new InMemoryStorage()).KeyAgreementFactory;

        [Fact]
        public void ServerInitializeTest()
        {
            byte[] rk = rng.Generate(32);
            byte[] rhk = rng.Generate(32);
            byte[] shk = rng.Generate(32);
            var skey1 = new KeyAgreement(KeyGeneration.GeneratePrivateKey());
            var skey2 = new KeyAgreement(KeyGeneration.GeneratePrivateKey());
            byte[] ckey = KeyGeneration.GeneratePrivateKey();
            byte[] cpub = KeyGeneration.GetPublicKeyFromPrivateKey(ckey);
            var ecdhstep = EcdhRatchetStep.InitializeServer(kdf, digest,
                skey1, rk, cpub, skey2, rhk, shk);

            Assert.NotNull(ecdhstep);
            Assert.NotNull(ecdhstep.NextReceiveHeaderKey);
            Assert.NotNull(ecdhstep.NextSendHeaderKey);
            Assert.NotNull(ecdhstep.NextRootKey);
            Assert.NotNull(ecdhstep.ReceiveHeaderKey);
            Assert.NotNull(ecdhstep.ReceivingChain.ChainKey);
            Assert.Equal(0, ecdhstep.ReceivingChain.Generation);
            Assert.NotNull(ecdhstep.SendingChain.ChainKey);
            Assert.Equal(0, ecdhstep.SendingChain.Generation);
        }

        [Fact]
        public void ClientInitializeTest()
        {
            byte[] rk = rng.Generate(32);
            byte[] rhk = rng.Generate(32);
            byte[] shk = rng.Generate(32);
            var ckey1 = new KeyAgreement(KeyGeneration.GeneratePrivateKey());
            var ckey2 = new KeyAgreement(KeyGeneration.GeneratePrivateKey());
            byte[] skey1 = KeyGeneration.GeneratePrivateKey();
            byte[] skey2 = KeyGeneration.GeneratePrivateKey();
            byte[] spub1 = KeyGeneration.GetPublicKeyFromPrivateKey(skey1);
            byte[] spub2 = KeyGeneration.GetPublicKeyFromPrivateKey(skey2);
            var ecdhsteps = EcdhRatchetStep.InitializeClient(kdf, digest,
                rk, spub1, spub2, ckey1, rhk, shk, ckey2);

            Assert.NotNull(ecdhsteps);
            Assert.NotNull(ecdhsteps[0]);
            Assert.NotNull(ecdhsteps[1]);

            Assert.Null(ecdhsteps[0].NextReceiveHeaderKey);
            Assert.Null(ecdhsteps[0].NextSendHeaderKey);
            Assert.Null(ecdhsteps[0].NextRootKey);
            Assert.Null(ecdhsteps[0].ReceiveHeaderKey);
            Assert.Null(ecdhsteps[0].ReceivingChain.ChainKey);
            Assert.NotNull(ecdhsteps[0].SendingChain.ChainKey);
            Assert.Equal(0, ecdhsteps[0].SendingChain.Generation);

            Assert.NotNull(ecdhsteps[1].NextReceiveHeaderKey);
            Assert.NotNull(ecdhsteps[1].NextSendHeaderKey);
            Assert.NotNull(ecdhsteps[1].NextRootKey);
            Assert.NotNull(ecdhsteps[1].ReceiveHeaderKey);
            Assert.NotNull(ecdhsteps[1].ReceivingChain.ChainKey);
            Assert.Equal(0, ecdhsteps[1].ReceivingChain.Generation);
            Assert.NotNull(ecdhsteps[1].SendingChain.ChainKey);
            Assert.Equal(0, ecdhsteps[1].SendingChain.Generation);
        }

        [Fact]
        public void InitialChainSymmetryTest1()
        {
            byte[] rk = rng.Generate(32);
            byte[] rhk = rng.Generate(32);
            byte[] shk = rng.Generate(32);
            var skey1 = new KeyAgreement(KeyGeneration.GeneratePrivateKey());
            var skey2 = new KeyAgreement(KeyGeneration.GeneratePrivateKey());
            var ckey1 = new KeyAgreement(KeyGeneration.GeneratePrivateKey());
            var ckey2 = new KeyAgreement(KeyGeneration.GeneratePrivateKey());
            byte[] spub1 = skey1.GetPublicKey();
            byte[] spub2 = skey2.GetPublicKey();
            byte[] cpub1 = ckey1.GetPublicKey();
            byte[] cpub2 = ckey2.GetPublicKey();
            var secdhstep = EcdhRatchetStep.InitializeServer(kdf, digest,
                skey1, rk, cpub1, skey2, rhk, shk);
            var cecdhsteps = EcdhRatchetStep.InitializeClient(kdf, digest,
                rk, spub1, spub2, ckey1, shk, rhk, ckey2);

            // the initialized client can send to the server
            var clientkeys = cecdhsteps[0].SendingChain.RatchetForSending(kdf);
            var serverkeys = secdhstep.ReceivingChain.RatchetForReceiving(kdf, clientkeys.generation);

            Assert.Equal(clientkeys.key, serverkeys.key);
        }

        [Fact]
        public void InitialChainSymmetryTest2()
        {
            byte[] rk = rng.Generate(32);
            byte[] rhk = rng.Generate(32);
            byte[] shk = rng.Generate(32);
            var skey1 = new KeyAgreement(KeyGeneration.GeneratePrivateKey());
            var skey2 = new KeyAgreement(KeyGeneration.GeneratePrivateKey());
            var ckey1 = new KeyAgreement(KeyGeneration.GeneratePrivateKey());
            var ckey2 = new KeyAgreement(KeyGeneration.GeneratePrivateKey());
            byte[] spub1 = skey1.GetPublicKey();
            byte[] spub2 = skey2.GetPublicKey();
            byte[] cpub1 = ckey1.GetPublicKey();
            byte[] cpub2 = ckey2.GetPublicKey();
            var secdhstep = EcdhRatchetStep.InitializeServer(kdf, digest,
                skey1, rk, cpub1, skey2, rhk, shk);
            var cecdhsteps = EcdhRatchetStep.InitializeClient(kdf, digest,
                rk, spub1, spub2, ckey1, shk, rhk, ckey2);

            // the server can send to the client
            var serverkeys = secdhstep.SendingChain.RatchetForSending(kdf);
            var clientkeys = cecdhsteps[1].ReceivingChain.RatchetForReceiving(kdf, serverkeys.generation);

            Assert.Equal(serverkeys.key, clientkeys.key);
        }

        [Fact]
        public void InitialChainRatchetTest()
        {
            byte[] rk = rng.Generate(32);
            byte[] rhk = rng.Generate(32);
            byte[] shk = rng.Generate(32);
            var skey1 = new KeyAgreement(KeyGeneration.GeneratePrivateKey());
            var skey2 = new KeyAgreement(KeyGeneration.GeneratePrivateKey());
            var skey3 = new KeyAgreement(KeyGeneration.GeneratePrivateKey());
            var ckey1 = new KeyAgreement(KeyGeneration.GeneratePrivateKey());
            var ckey2 = new KeyAgreement(KeyGeneration.GeneratePrivateKey());
            byte[] spub1 = skey1.GetPublicKey();
            byte[] spub2 = skey2.GetPublicKey();
            byte[] spub3 = skey3.GetPublicKey();
            byte[] cpub1 = ckey1.GetPublicKey();
            byte[] cpub2 = ckey2.GetPublicKey();
            var secdhstep1 = EcdhRatchetStep.InitializeServer(kdf, digest,
                skey1, rk, cpub1, skey2, rhk, shk);
            var cecdhsteps = EcdhRatchetStep.InitializeClient(kdf, digest,
                rk, spub1, spub2, ckey1, shk, rhk, ckey2);

            // client sends new ECDH to server
            var secdhstep2 = secdhstep1.Ratchet(kaf, kdf, digest,
                cpub2, skey3);

            // which means the client now can send using its latest step
            var clientkeys = cecdhsteps[1].SendingChain.RatchetForSending(kdf);
            var serverkeys = secdhstep2.ReceivingChain.RatchetForReceiving(kdf, clientkeys.generation);

            Assert.Equal(clientkeys.key, serverkeys.key);
        }

        [Fact]
        public void SecondChainRatchetTest()
        {
            byte[] rk = rng.Generate(32);
            byte[] rhk = rng.Generate(32);
            byte[] shk = rng.Generate(32);
            var skey1 = new KeyAgreement(KeyGeneration.GeneratePrivateKey());
            var skey2 = new KeyAgreement(KeyGeneration.GeneratePrivateKey());
            var skey3 = new KeyAgreement(KeyGeneration.GeneratePrivateKey());
            var ckey1 = new KeyAgreement(KeyGeneration.GeneratePrivateKey());
            var ckey2 = new KeyAgreement(KeyGeneration.GeneratePrivateKey());
            var ckey3 = new KeyAgreement(KeyGeneration.GeneratePrivateKey());
            byte[] spub1 = skey1.GetPublicKey();
            byte[] spub2 = skey2.GetPublicKey();
            byte[] spub3 = skey3.GetPublicKey();
            byte[] cpub1 = ckey1.GetPublicKey();
            byte[] cpub2 = ckey2.GetPublicKey();
            byte[] cpub3 = ckey2.GetPublicKey();
            var secdhstep1 = EcdhRatchetStep.InitializeServer(kdf, digest,
                skey1, rk, cpub1, skey2, rhk, shk);
            var cecdhsteps = EcdhRatchetStep.InitializeClient(kdf, digest,
                rk, spub1, spub2, ckey1, shk, rhk, ckey2);
            var secdhstep2 = secdhstep1.Ratchet(kaf, kdf, digest,
                cpub2, skey3);

            // and the server sends back
            var cecdhstep3 = cecdhsteps[1].Ratchet(kaf, kdf, digest,
                spub3, ckey3);

            var serverkeys = secdhstep2.SendingChain.RatchetForSending(kdf);
            var clientkeys = cecdhstep3.ReceivingChain.RatchetForReceiving(kdf, serverkeys.generation);

            Assert.Equal(serverkeys.key, clientkeys.key);
        }

        [InlineData(new byte[] { 0x7d, 0x28, 0xe5, 0xd1, 0x07, 0x1f, 0x29, 0x1d, 0xc8, 0x88, 0xbd, 0xef, 0x1a, 0x2d, 0xe6, 0x21, 0x8d, 0x9b, 0xb3, 0xb8, 0x5d, 0x3e, 0x2b, 0x91, 0xc1, 0xa0, 0xb1, 0x43, 0x2a, 0x33, 0x2f, 0x6c }, new byte[] { 0x51, 0xfa, 0x9f, 0xa9, 0x02, 0xe2, 0xa9, 0x55, 0x94, 0x0e, 0xa7, 0x6f, 0xd0, 0xb4, 0xe5, 0xb3, 0xce, 0xfd, 0x85, 0x58, 0xd3, 0xd2, 0x01, 0x46, 0x44, 0x49, 0x5d, 0x06, 0xd0, 0x9a, 0x9f, 0xd8 }, new byte[] { 0x6f, 0xcd, 0xd8, 0xa0, 0x64, 0x09, 0xcd, 0xbc, 0xe4, 0x69, 0xf4, 0x13, 0xcd, 0xbe, 0xe8, 0xe4, 0x5e, 0x59, 0xf7, 0x2e, 0x07, 0x84, 0x6f, 0xd4, 0xc2, 0x06, 0x16, 0x4d, 0x39, 0xec, 0x76, 0x1f }, new byte[] { 0x66, 0x8e, 0xa0, 0xbe, 0x43, 0xd7, 0x9e, 0x04, 0xe7, 0x5d, 0x36, 0x19, 0x7a, 0xca, 0x9b, 0x85, 0x35, 0x88, 0x7c, 0x66, 0xd0, 0x43, 0x18, 0xfe, 0x37, 0x41, 0x2a, 0x27, 0x61, 0x39, 0x6c, 0xf3 }, new byte[] { 0x09, 0xf4, 0x9d, 0xaa, 0x1d, 0x0a, 0xf4, 0xe5, 0x7e, 0x9d, 0x14, 0x1a, 0x6b, 0xd8, 0xa7, 0x4e, 0xbf, 0xed, 0x9d, 0xe8, 0xb9, 0x96, 0x67, 0xea, 0xf9, 0xb1, 0x3a, 0xff, 0xde, 0xbd, 0x86, 0x7c }, new byte[] { 0xe3, 0x17, 0xd8, 0xa1, 0xec, 0xbc, 0x9f, 0x78, 0x7c, 0x6b, 0xb8, 0x99, 0x75, 0x1f, 0xe2, 0xca, 0x57, 0x95, 0x66, 0xdd, 0x9f, 0x5c, 0xd5, 0x7b, 0xb9, 0xab, 0x8f, 0xf3, 0x9f, 0xe7, 0x3a, 0x03 }, new byte[] { 0xc4, 0x53, 0x9a, 0x60, 0xfe, 0xb3, 0x43, 0xc2, 0x02, 0xd3, 0xd4, 0x13, 0xe3, 0x6b, 0x12, 0x2b, 0xc9, 0x34, 0x17, 0x3d, 0xeb, 0xa1, 0x51, 0x2c, 0x16, 0x47, 0x3d, 0xe7, 0xcf, 0x6b, 0x54, 0x8f }, new byte[] { 0x22, 0x60, 0x46, 0x8d, 0x5b, 0x21, 0x0e, 0xb9, 0x90, 0x59, 0x50, 0xe1, 0x0d, 0x15, 0x4e, 0x2b, 0xe4, 0x1e, 0x71, 0xfa, 0x22, 0x82, 0x9c, 0x1f, 0xb2, 0x20, 0x41, 0xce, 0xc3, 0x95, 0xa2, 0x01 })]
        [InlineData(new byte[] { 0x40, 0xc5, 0xdc, 0xe5, 0xbd, 0x4b, 0xf3, 0xe0, 0x86, 0xd5, 0xe5, 0x76, 0xeb, 0x82, 0xd6, 0xa8, 0x85, 0x64, 0x56, 0x33, 0x4b, 0x3c, 0xa4, 0x8a, 0xcd, 0x6c, 0x2d, 0xc7, 0xc5, 0xd6, 0xae, 0x5a }, new byte[] { 0x19, 0xac, 0xf7, 0x07, 0x8e, 0x99, 0xc2, 0xfc, 0x39, 0xca, 0x73, 0xe6, 0xfe, 0xb9, 0x2e, 0x42, 0xa6, 0x91, 0xb9, 0x4e, 0x03, 0x55, 0x67, 0x69, 0x0b, 0x58, 0x43, 0xc5, 0x36, 0x54, 0x8d, 0x37 }, new byte[] { 0x35, 0xef, 0xc5, 0xe9, 0xa9, 0xfb, 0x87, 0x16, 0x23, 0x75, 0xfc, 0xd9, 0x9e, 0xca, 0xca, 0x28, 0x17, 0xc3, 0xe7, 0xe6, 0x34, 0xc3, 0x86, 0xb1, 0xf4, 0x0b, 0x7f, 0x28, 0xed, 0x58, 0x28, 0x30 }, new byte[] { 0x73, 0xb9, 0x4c, 0xfa, 0xe4, 0xb8, 0x48, 0xc7, 0x31, 0xd2, 0x90, 0x81, 0xa0, 0x67, 0x72, 0x50, 0x9c, 0xd7, 0xb2, 0x01, 0xf5, 0xc2, 0x21, 0xda, 0xa8, 0xda, 0x64, 0xeb, 0x0e, 0xa2, 0x70, 0xdc }, new byte[] { 0x3f, 0x6e, 0x17, 0x89, 0x6d, 0xb0, 0x5f, 0xfa, 0x82, 0x68, 0xd3, 0x48, 0x25, 0x5f, 0x4f, 0xe5, 0xfe, 0x89, 0x65, 0x5d, 0x45, 0x8f, 0xa5, 0xaf, 0x09, 0x1d, 0xe0, 0x72, 0xbb, 0xde, 0x78, 0xb7 }, new byte[] { 0x3a, 0x05, 0x86, 0xa6, 0x7d, 0xe4, 0x55, 0xc8, 0x67, 0x17, 0x38, 0x28, 0xa1, 0xde, 0x79, 0x1a, 0xc2, 0xbb, 0x1a, 0xfa, 0xa0, 0x11, 0x6b, 0x30, 0xa1, 0x71, 0x57, 0x86, 0xcc, 0xba, 0xa4, 0x64 }, new byte[] { 0xa8, 0xb5, 0xf4, 0x1b, 0x9e, 0xac, 0xdf, 0x43, 0xf4, 0x83, 0x1e, 0xf3, 0x66, 0x9c, 0x99, 0xa9, 0x8d, 0x27, 0xeb, 0x4d, 0x9e, 0xfb, 0xbd, 0x8b, 0xb1, 0x33, 0xfe, 0x2a, 0x6f, 0x68, 0xa5, 0x7a }, new byte[] { 0xbb, 0xe5, 0x19, 0x1c, 0xe2, 0x01, 0xd9, 0xf0, 0x33, 0xc3, 0xf2, 0x2e, 0x96, 0x76, 0xde, 0xb7, 0x58, 0x35, 0xc5, 0x67, 0x04, 0xc5, 0xf0, 0xaf, 0x47, 0x9d, 0xda, 0x73, 0x5c, 0x7f, 0xdd, 0xe2 })]
        [InlineData(new byte[] { 0x46, 0x8b, 0xdc, 0x95, 0x09, 0xa3, 0x47, 0xa3, 0xb6, 0x48, 0x06, 0x7f, 0x77, 0xf5, 0x9d, 0xb6, 0xd5, 0x31, 0x30, 0x2c, 0x32, 0x07, 0x55, 0xa9, 0x7a, 0x43, 0xc8, 0x16, 0x33, 0xd9, 0x70, 0x25 }, new byte[] { 0x6b, 0x74, 0x37, 0xcc, 0x62, 0xa8, 0xf3, 0x73, 0x7d, 0x79, 0x0e, 0xc0, 0xe6, 0x8a, 0x9a, 0x5e, 0x8e, 0x0e, 0xfc, 0x8b, 0x3b, 0x7c, 0xb4, 0xb7, 0xff, 0x26, 0x04, 0xad, 0xdb, 0xf6, 0x37, 0x8e }, new byte[] { 0xd5, 0xb9, 0xc2, 0x84, 0x77, 0xc9, 0x5c, 0xe2, 0x99, 0x62, 0xe6, 0xc4, 0x4c, 0x0b, 0x4f, 0x72, 0x8d, 0xb2, 0xc7, 0x44, 0x37, 0x04, 0xed, 0x06, 0xb5, 0xfb, 0x8e, 0xc4, 0xd4, 0x19, 0xc0, 0xb8 }, new byte[] { 0x43, 0xdb, 0xdc, 0x06, 0xa2, 0x99, 0x55, 0xb8, 0x6f, 0x6d, 0x16, 0x20, 0x0c, 0xd7, 0x12, 0x69, 0xb0, 0x1b, 0xb2, 0x50, 0x18, 0xca, 0xac, 0x44, 0x29, 0x78, 0x71, 0xcb, 0x8f, 0x54, 0x5f, 0xb4 }, new byte[] { 0x4a, 0xd7, 0x97, 0xbd, 0xb6, 0xb1, 0x4f, 0xa0, 0x9c, 0x9b, 0x67, 0x63, 0xb8, 0x56, 0xfa, 0x5b, 0x39, 0xc9, 0x8b, 0xd2, 0x2f, 0xfc, 0xdd, 0xc9, 0xaa, 0x38, 0x6e, 0x6d, 0x3e, 0x22, 0x25, 0x83 }, new byte[] { 0x09, 0xad, 0xd8, 0xc3, 0xb5, 0x56, 0x51, 0x78, 0x30, 0x2e, 0xb1, 0x8f, 0x92, 0xea, 0xfa, 0x2f, 0x4b, 0xa8, 0x20, 0xed, 0xf8, 0xbb, 0xe9, 0x91, 0xdd, 0xeb, 0x5f, 0x7d, 0x9f, 0x86, 0x29, 0xe4 }, new byte[] { 0xf8, 0xdf, 0x06, 0x18, 0xfc, 0x78, 0x3a, 0xae, 0x5a, 0xff, 0x5c, 0xd7, 0x00, 0xf8, 0x7c, 0x9c, 0x96, 0xd1, 0x99, 0x9e, 0xff, 0x09, 0x19, 0x02, 0xe5, 0x04, 0x5d, 0xab, 0x62, 0x44, 0xf3, 0x2e }, new byte[] { 0xe2, 0x64, 0x76, 0xff, 0xa6, 0x74, 0x43, 0x74, 0xf6, 0x55, 0x37, 0xd7, 0xfa, 0xc0, 0x72, 0xa5, 0xd9, 0x94, 0xb9, 0x5e, 0xc7, 0x43, 0x65, 0x80, 0x64, 0xd8, 0x19, 0x25, 0x0a, 0xd6, 0xe9, 0xb2 })]
        [Theory]
        public void ServerInitializeReferenceTest(byte[] rk, byte[] rhk, byte[] shk, byte[] _skey1, byte[] _skey2, byte[] cpub, byte[] rckey, byte[] sckey)
        {
            var skey1 = new KeyAgreement(_skey1);
            var skey2 = new KeyAgreement(_skey2);
            var ecdhstep = EcdhRatchetStep.InitializeServer(kdf, digest,
                skey1, rk, cpub, skey2, rhk, shk);

            Assert.Equal(rckey, ecdhstep.ReceivingChain.ChainKey);
            Assert.Equal(sckey, ecdhstep.SendingChain.ChainKey);
        }

        [InlineData(new byte[] { 0x9d, 0xcd, 0xf8, 0x5a, 0xa4, 0xf2, 0x8c, 0x8d, 0x9a, 0x00, 0x37, 0x06, 0x7a, 0x6f, 0xe5, 0x23, 0xef, 0x07, 0xdb, 0xc3, 0x05, 0x1c, 0xb4, 0x39, 0x6c, 0x68, 0x27, 0x99, 0x48, 0xc5, 0x72, 0x1c }, new byte[] { 0x08, 0x07, 0x7c, 0xa5, 0xc3, 0x3d, 0x37, 0x9c, 0xfb, 0x2b, 0xee, 0x92, 0xde, 0x90, 0x69, 0x94, 0x92, 0x3c, 0x6f, 0x44, 0x07, 0x20, 0xc3, 0xa0, 0xe7, 0xd2, 0x9a, 0xeb, 0xdf, 0x85, 0x1c, 0x04 }, new byte[] { 0x91, 0x75, 0xa9, 0xd8, 0x09, 0xa4, 0xd4, 0xe8, 0x93, 0x9f, 0x64, 0x65, 0x1e, 0x55, 0xb5, 0x29, 0x4a, 0x11, 0xa0, 0x65, 0xb5, 0xe1, 0x55, 0x6a, 0x48, 0x32, 0xc0, 0xf5, 0xea, 0xe4, 0x11, 0x11 }, new byte[] { 0x52, 0x45, 0xa8, 0x41, 0xfb, 0x10, 0xf4, 0xe9, 0x21, 0xb2, 0x59, 0xf5, 0x1c, 0xd8, 0xe0, 0x93, 0x69, 0x81, 0x28, 0xf5, 0x16, 0x54, 0x62, 0x81, 0x23, 0x5d, 0x69, 0x95, 0xed, 0xa9, 0xca, 0xf5 }, new byte[] { 0x25, 0x9d, 0x85, 0x86, 0x89, 0x99, 0x2b, 0x3a, 0x47, 0x74, 0x9f, 0x0a, 0xdc, 0x8f, 0xf3, 0x76, 0xde, 0x2b, 0x97, 0xf1, 0xc3, 0x2c, 0x38, 0x81, 0x21, 0xe5, 0x36, 0x31, 0x99, 0xe6, 0xc2, 0xf4 }, new byte[] { 0x79, 0xde, 0x23, 0x54, 0x8b, 0x1f, 0xbd, 0x65, 0x80, 0xee, 0xcd, 0x18, 0xdd, 0x2a, 0x2c, 0x5d, 0x1e, 0x99, 0xb6, 0xb8, 0x12, 0xbb, 0xc0, 0x3f, 0xc0, 0xb9, 0x04, 0xea, 0x55, 0xb1, 0xb8, 0xaf }, new byte[] { 0x69, 0xe1, 0x4d, 0x61, 0x01, 0x92, 0x16, 0xf2, 0x2f, 0x1b, 0x0b, 0x84, 0xdc, 0xd2, 0xe7, 0x62, 0x8e, 0x4f, 0xb4, 0x8c, 0x43, 0x56, 0xf4, 0x66, 0xd2, 0x9c, 0xa1, 0x5d, 0x2f, 0xe6, 0xa3, 0xdf }, new byte[] { 0x34, 0x9a, 0x6b, 0x6c, 0xa3, 0xd6, 0x23, 0x6f, 0x5b, 0x56, 0x75, 0xab, 0x90, 0x5a, 0xff, 0x7b, 0xe2, 0xf4, 0x39, 0xf1, 0x6e, 0x46, 0xf9, 0x3e, 0xa6, 0xc9, 0x45, 0xf7, 0x25, 0x08, 0x4d, 0x5f }, new byte[] { 0x4b, 0xa6, 0xbb, 0xde, 0xab, 0x58, 0x3e, 0xb4, 0xff, 0x8c, 0x9b, 0xb7, 0x1b, 0x5d, 0x4e, 0x74, 0x5f, 0xbe, 0x84, 0x40, 0xad, 0x71, 0xe3, 0x5b, 0xc0, 0x7a, 0xe0, 0xe7, 0xdc, 0x68, 0x12, 0x22 })]
        [InlineData(new byte[] { 0x97, 0x35, 0x46, 0x79, 0xe1, 0xd4, 0x04, 0xa7, 0x48, 0xd6, 0x6e, 0xe6, 0x37, 0x34, 0x3b, 0xbd, 0x55, 0x4e, 0xdd, 0xed, 0x44, 0x67, 0x92, 0x0a, 0x5b, 0xd4, 0x1f, 0x1a, 0x5c, 0x1f, 0xd3, 0x11 }, new byte[] { 0x18, 0x89, 0x01, 0x94, 0x94, 0x80, 0x22, 0x13, 0x23, 0xb2, 0xe3, 0x36, 0xe2, 0x99, 0x79, 0x78, 0xda, 0x20, 0x28, 0x22, 0x94, 0x1d, 0x73, 0xcd, 0x6e, 0x62, 0x94, 0xfd, 0x4e, 0x9c, 0xb1, 0x6e }, new byte[] { 0xd3, 0x16, 0xbd, 0x16, 0x71, 0x01, 0x17, 0x8d, 0x56, 0x0e, 0xb2, 0xae, 0x90, 0x99, 0xc7, 0x4c, 0x10, 0x58, 0x50, 0xc9, 0x95, 0x54, 0xf8, 0xb9, 0xca, 0x5b, 0x46, 0x15, 0xdb, 0xba, 0xd9, 0x67 }, new byte[] { 0x2b, 0xe3, 0x68, 0x33, 0xc6, 0x5e, 0x5c, 0x39, 0x9f, 0x38, 0x46, 0xc7, 0xa5, 0x03, 0xbd, 0x88, 0xdf, 0xb8, 0xeb, 0x8b, 0x55, 0xa1, 0xd4, 0xc9, 0xc3, 0x6b, 0xbb, 0x68, 0x42, 0x47, 0x30, 0xea }, new byte[] { 0x58, 0x0e, 0x8d, 0x44, 0x9f, 0xda, 0x03, 0xd6, 0x0e, 0x9b, 0x3e, 0x64, 0x64, 0xf2, 0x4e, 0x1b, 0x26, 0x6b, 0x7f, 0xb5, 0xde, 0x57, 0xdb, 0xd2, 0x41, 0x57, 0x68, 0x22, 0x29, 0xc4, 0x50, 0xba }, new byte[] { 0x0f, 0xce, 0x82, 0x04, 0x90, 0x86, 0x42, 0xeb, 0x8d, 0x89, 0x67, 0x5e, 0x8b, 0xc9, 0x4d, 0xa5, 0xc4, 0x98, 0xc0, 0x16, 0xf1, 0x00, 0x4d, 0x10, 0x3c, 0x9c, 0xc4, 0xd5, 0x8b, 0x96, 0x59, 0xf0 }, new byte[] { 0x68, 0xe1, 0xf3, 0x07, 0xe5, 0x53, 0x72, 0x90, 0x82, 0xb0, 0xb2, 0xca, 0x40, 0x07, 0x61, 0x99, 0x4d, 0x63, 0x51, 0xa0, 0x30, 0xb3, 0x10, 0x54, 0x27, 0x8e, 0xc4, 0xa1, 0x62, 0xcc, 0xad, 0x6c }, new byte[] { 0xe6, 0xb7, 0xdb, 0x70, 0xd1, 0x76, 0xd2, 0xbd, 0xa6, 0x63, 0xbc, 0xe1, 0x90, 0x27, 0x5b, 0x81, 0xb2, 0xb3, 0x64, 0x70, 0x59, 0xc0, 0x44, 0xd4, 0x06, 0x1c, 0x60, 0xe5, 0x35, 0xe0, 0x87, 0x22 }, new byte[] { 0x49, 0x5b, 0x55, 0xcc, 0x3b, 0x4e, 0xe2, 0xb9, 0xb6, 0x60, 0x02, 0x59, 0xf4, 0x05, 0x58, 0x23, 0x51, 0x0a, 0x4c, 0x65, 0x1d, 0x1e, 0x52, 0xc0, 0xc2, 0x3c, 0x6c, 0x0f, 0xb6, 0x74, 0xc8, 0x5b })]
        [InlineData(new byte[] { 0x0f, 0x26, 0x55, 0xd2, 0xf0, 0xb2, 0x5d, 0x7d, 0x9b, 0x24, 0x2c, 0x8d, 0xd0, 0x44, 0x2f, 0xc2, 0x3b, 0x25, 0xe0, 0x09, 0xe6, 0x55, 0xd4, 0xa7, 0xae, 0x5a, 0x57, 0x5d, 0x43, 0x76, 0x53, 0x6b }, new byte[] { 0xba, 0xa0, 0xca, 0x00, 0x2a, 0xa1, 0xd3, 0x81, 0xbf, 0xfd, 0xcb, 0xf2, 0xd5, 0xf3, 0x9c, 0xd8, 0x24, 0xf8, 0x5f, 0x09, 0x2d, 0x57, 0x6b, 0xca, 0x40, 0xf2, 0x0a, 0x4d, 0xf3, 0x98, 0xbd, 0x1e }, new byte[] { 0x8f, 0x87, 0x69, 0x44, 0x17, 0xe7, 0x2e, 0x92, 0xfd, 0x71, 0xcf, 0xdb, 0xe7, 0xbe, 0x45, 0x8c, 0x6c, 0xad, 0x42, 0x95, 0xcc, 0xd5, 0x04, 0x17, 0x4e, 0x99, 0xd2, 0xa9, 0xe2, 0x17, 0x76, 0xa0 }, new byte[] { 0x3d, 0x99, 0x2e, 0x23, 0xce, 0x96, 0x4f, 0x9f, 0x32, 0xcf, 0x78, 0x47, 0xd1, 0x0a, 0x2b, 0x89, 0x22, 0x31, 0xea, 0xc5, 0xc7, 0xef, 0xa6, 0xa1, 0xa2, 0x86, 0x2e, 0xf2, 0xe2, 0x49, 0x67, 0xdd }, new byte[] { 0x11, 0x2a, 0x53, 0xd3, 0x7d, 0xf0, 0x5d, 0x30, 0x39, 0x0c, 0xe3, 0x0a, 0x51, 0xd0, 0xd3, 0x11, 0xd1, 0xfe, 0x59, 0x81, 0xdc, 0x39, 0xe1, 0xae, 0x2a, 0x1b, 0xe5, 0x1e, 0x01, 0x19, 0xb0, 0x16 }, new byte[] { 0x16, 0x6a, 0xa6, 0x02, 0x45, 0x33, 0x6c, 0x86, 0x92, 0xb4, 0xdc, 0xf1, 0xca, 0x6f, 0xab, 0x74, 0x63, 0x84, 0x36, 0xb0, 0xa3, 0x43, 0x4a, 0xd6, 0x7d, 0xf2, 0xe8, 0x47, 0x05, 0xca, 0xe8, 0xca }, new byte[] { 0xb9, 0x79, 0x72, 0xa8, 0xe9, 0x99, 0x44, 0x68, 0x20, 0xea, 0x85, 0x00, 0x23, 0xb3, 0xbb, 0x04, 0x16, 0xe6, 0x5f, 0xf1, 0x2a, 0xaa, 0xc8, 0x2f, 0x59, 0x4f, 0x47, 0xa5, 0xac, 0xdd, 0x74, 0xa4 }, new byte[] { 0x5f, 0x73, 0x44, 0x8a, 0x19, 0xd7, 0xc7, 0x01, 0xb3, 0x5b, 0x69, 0xc5, 0x6b, 0x02, 0x74, 0x9c, 0x5a, 0x0f, 0x7f, 0xcc, 0xcb, 0x24, 0x4a, 0xc6, 0x51, 0xbd, 0xa2, 0x94, 0x2d, 0x9a, 0xc2, 0x7f }, new byte[] { 0x63, 0x5b, 0x89, 0xef, 0x69, 0xd5, 0xa4, 0xde, 0x43, 0x51, 0x71, 0xc1, 0x29, 0xf6, 0x10, 0x90, 0x28, 0x3d, 0x70, 0xd1, 0xe1, 0x2a, 0x84, 0x7a, 0xbf, 0xb6, 0x8d, 0x92, 0x9f, 0x5c, 0x11, 0x00 })]
        [Theory]
        public void ClientInitializeReferenceTest(byte[] rk, byte[] rhk, byte[] shk, byte[] _ckey1, byte[] _ckey2, byte[] spub1, byte[] spub2, byte[] rckey, byte[] sckey)
        {
            var ckey1 = new KeyAgreement(_ckey1);
            var ckey2 = new KeyAgreement(_ckey2);
            var ecdhsteps = EcdhRatchetStep.InitializeClient(kdf, digest,
                rk, spub1, spub2, ckey1, rhk, shk, ckey2);

            Assert.Equal(rckey, ecdhsteps[1].ReceivingChain.ChainKey);
            Assert.Equal(sckey, ecdhsteps[0].SendingChain.ChainKey);
        }

        [InlineData(new byte[] { 0x63, 0x9f, 0xa1, 0xe3, 0x4e, 0x51, 0x51, 0x29, 0x6c, 0x20, 0x53, 0xcc, 0x0b, 0xd1, 0xf0, 0x48, 0xb7, 0x3a, 0x7a, 0xd7, 0x78, 0xa6, 0x91, 0x63, 0xb6, 0x28, 0xa3, 0xdf, 0x25, 0x75, 0x2c, 0x06 }, new byte[] { 0x36, 0x54, 0x32, 0x54, 0xf1, 0xc6, 0x76, 0xf2, 0x0d, 0x6a, 0x69, 0x9c, 0x21, 0x6e, 0xbf, 0x21, 0x59, 0xa1, 0xa6, 0xff, 0x09, 0xc7, 0x90, 0xb5, 0xba, 0x10, 0xa4, 0x5b, 0xdf, 0x9d, 0xf7, 0x3a }, new byte[] { 0x63, 0x90, 0xf8, 0x97, 0xdc, 0x40, 0xbd, 0x01, 0xa6, 0xed, 0x3d, 0x77, 0x40, 0x4e, 0xa7, 0x87, 0x83, 0xc2, 0xbd, 0x31, 0x6a, 0xe4, 0x32, 0x59, 0x9f, 0xff, 0x64, 0x57, 0xd3, 0x4f, 0x01, 0x89 }, new byte[] { 0x16, 0xed, 0xc4, 0xc4, 0x77, 0x7d, 0xad, 0xc3, 0x26, 0x14, 0xce, 0xb7, 0x9c, 0x76, 0x05, 0x1b, 0x3c, 0xb3, 0x46, 0xa5, 0xeb, 0x24, 0xae, 0xd1, 0x2f, 0x0e, 0x9d, 0x22, 0xd1, 0x25, 0x22, 0xf2 }, new byte[] { 0x03, 0x2e, 0xc5, 0xed, 0xbe, 0xb9, 0x82, 0x6a, 0x3c, 0xb6, 0x8b, 0xd0, 0x5e, 0x5e, 0x76, 0x88, 0x3a, 0x2b, 0x11, 0x30, 0xb2, 0x6d, 0xc1, 0x2c, 0xdf, 0xed, 0x05, 0x18, 0x3e, 0x0a, 0x9e, 0xfe }, new byte[] { 0xb6, 0xf8, 0x68, 0x86, 0x14, 0x7b, 0x88, 0x17, 0x88, 0xb5, 0xfe, 0xf4, 0x1a, 0x5f, 0xff, 0x68, 0x22, 0x18, 0xec, 0x1c, 0x64, 0x80, 0x6c, 0x33, 0x63, 0xa5, 0xd3, 0x69, 0xf9, 0x38, 0xb4, 0xf4 }, new byte[] { 0x54, 0x4d, 0xed, 0xd9, 0xa1, 0x1d, 0x64, 0x6b, 0xac, 0xdb, 0xf3, 0x85, 0x0a, 0xba, 0xf1, 0xd6, 0xf9, 0x7a, 0x3a, 0xea, 0x4d, 0xd3, 0x64, 0x6a, 0x95, 0x57, 0x15, 0x95, 0xc3, 0x32, 0xb1, 0x36 }, new byte[] { 0x2d, 0x41, 0x9e, 0xbf, 0x8b, 0xbd, 0x57, 0xd9, 0x10, 0xae, 0xbc, 0x22, 0x44, 0x0a, 0xde, 0xa0, 0xd7, 0x52, 0x6e, 0x0b, 0x6d, 0xa2, 0xe6, 0x87, 0xa1, 0xdd, 0xba, 0x0a, 0x08, 0x8c, 0x05, 0x35 }, new byte[] { 0x16, 0x99, 0xb6, 0x09, 0xff, 0x32, 0xb2, 0x20, 0x21, 0xc9, 0xef, 0xf3, 0xd1, 0x1a, 0x88, 0xf0, 0xe5, 0x43, 0x9b, 0x22, 0xa0, 0x62, 0x47, 0x8c, 0x78, 0x00, 0x82, 0x98, 0x51, 0x4d, 0x2b, 0xbd }, new byte[] { 0xb9, 0x76, 0xc9, 0x59, 0x8c, 0x90, 0x41, 0xf1, 0xa5, 0xe3, 0xdc, 0x13, 0x1d, 0xb2, 0xd7, 0x85, 0xe3, 0x38, 0x54, 0x80, 0x0a, 0xe0, 0x3f, 0x2d, 0x21, 0x22, 0xcb, 0xdc, 0x70, 0x60, 0x89, 0x10 })]
        [InlineData(new byte[] { 0x22, 0x66, 0x55, 0xb6, 0xc6, 0x10, 0x74, 0x71, 0x63, 0x0f, 0x25, 0x5b, 0x5b, 0x69, 0xd1, 0x9b, 0x39, 0x8c, 0x34, 0x94, 0x84, 0xb2, 0x32, 0x2b, 0xe0, 0x5c, 0x66, 0x9f, 0x12, 0xf9, 0x66, 0xe8 }, new byte[] { 0x1c, 0x42, 0x84, 0x8e, 0xec, 0xdf, 0x12, 0x5c, 0x80, 0xf4, 0x9b, 0xd5, 0x1f, 0x00, 0x3e, 0x3d, 0x53, 0xcf, 0x55, 0x5c, 0x57, 0xcc, 0x70, 0x7a, 0x2b, 0x2e, 0x2b, 0x3b, 0x87, 0xfb, 0x6f, 0x1b }, new byte[] { 0x69, 0xca, 0x0e, 0xe8, 0x92, 0xe5, 0xb8, 0x4f, 0x43, 0x83, 0xd3, 0x2f, 0x2b, 0xf7, 0x53, 0x16, 0x1c, 0x8c, 0xe7, 0x26, 0x9e, 0xa6, 0xd1, 0x39, 0xfa, 0x5b, 0x79, 0x52, 0x84, 0xcb, 0x2f, 0xce }, new byte[] { 0x38, 0xb9, 0x80, 0xff, 0x93, 0x9b, 0x5e, 0x09, 0x2e, 0xd7, 0x8d, 0xc3, 0x10, 0x0e, 0x1e, 0x1e, 0xb0, 0x29, 0xb2, 0xe6, 0x31, 0xa2, 0x8c, 0xd5, 0x01, 0x6e, 0xed, 0x3e, 0xa4, 0x40, 0x1f, 0x78 }, new byte[] { 0x62, 0xe2, 0x4c, 0x59, 0x28, 0xef, 0x9d, 0x65, 0x70, 0x5b, 0x5a, 0xd8, 0x66, 0x67, 0x91, 0xbe, 0x05, 0x1f, 0x57, 0x30, 0x08, 0x19, 0x3d, 0x46, 0x5d, 0xc7, 0x15, 0x7b, 0x69, 0x1d, 0x6e, 0xf1 }, new byte[] { 0x29, 0x79, 0x95, 0xda, 0xbf, 0xd4, 0xe6, 0xc1, 0x29, 0x6f, 0xa1, 0xe1, 0xbe, 0x49, 0x13, 0xdc, 0xeb, 0xba, 0x85, 0x5b, 0xa4, 0x55, 0xb7, 0x04, 0xde, 0xa3, 0x7c, 0xec, 0xc9, 0x0b, 0x44, 0x1f }, new byte[] { 0xd7, 0x77, 0x06, 0x9a, 0x41, 0xb1, 0x09, 0x54, 0x27, 0xf5, 0x87, 0xbe, 0x1c, 0x42, 0x8f, 0x14, 0x32, 0xfd, 0xb8, 0xd8, 0x8b, 0x6c, 0x05, 0x34, 0xc2, 0xa4, 0x67, 0xed, 0xdd, 0x33, 0x6c, 0x91 }, new byte[] { 0x0a, 0xb2, 0xcf, 0xc0, 0x1e, 0xf8, 0x4c, 0x35, 0xf9, 0x02, 0x0f, 0x46, 0x8b, 0x12, 0x74, 0x2b, 0x3e, 0x4e, 0x4c, 0x26, 0x66, 0xa2, 0xf8, 0x74, 0xf6, 0xc5, 0xd7, 0xdf, 0x1b, 0x7d, 0x68, 0x18 }, new byte[] { 0x55, 0x7d, 0x13, 0x63, 0x8b, 0x7b, 0x73, 0xd9, 0x50, 0x2f, 0xa7, 0x65, 0x4e, 0x18, 0x55, 0xb9, 0x49, 0x40, 0x42, 0x80, 0x74, 0x47, 0x00, 0x3f, 0xb7, 0x28, 0xdd, 0xc2, 0x76, 0x67, 0x3d, 0x8d }, new byte[] { 0x7a, 0x34, 0x7d, 0x67, 0x7c, 0xd5, 0x6d, 0x1a, 0x3d, 0xba, 0x3c, 0x91, 0xc7, 0x84, 0x57, 0xdb, 0x99, 0x40, 0xdb, 0x8c, 0x16, 0x32, 0x48, 0x01, 0xdf, 0xdd, 0x72, 0x21, 0x67, 0xda, 0x6b, 0x63 })]
        [InlineData(new byte[] { 0x9e, 0x46, 0x5e, 0x67, 0x8a, 0x14, 0x20, 0x8e, 0xbb, 0xe3, 0x69, 0x54, 0xe2, 0x15, 0x7b, 0x6e, 0x9d, 0x10, 0xf8, 0xae, 0x69, 0x0e, 0x24, 0xb1, 0x63, 0x63, 0x13, 0xd9, 0x8b, 0x74, 0x98, 0xe1 }, new byte[] { 0x1c, 0x7a, 0xf0, 0xee, 0xc4, 0x44, 0x86, 0xbb, 0xbc, 0xd4, 0xca, 0xbd, 0x2b, 0xd9, 0xda, 0xfa, 0xed, 0xf2, 0x7e, 0x5d, 0x48, 0x0e, 0x09, 0x6b, 0xd3, 0x98, 0x88, 0x6a, 0xf4, 0x9b, 0x55, 0xa8 }, new byte[] { 0xd9, 0x04, 0x3b, 0xf8, 0x68, 0x6e, 0x3a, 0x39, 0x10, 0x73, 0x86, 0x62, 0x41, 0x47, 0x9a, 0xa0, 0xea, 0xd5, 0x74, 0x71, 0xce, 0x63, 0x0a, 0xc9, 0x74, 0xcc, 0x0e, 0x09, 0xb1, 0x91, 0xaa, 0x65 }, new byte[] { 0x9a, 0xbb, 0x1b, 0xaa, 0x3c, 0xf0, 0x7a, 0x90, 0xc5, 0x40, 0x79, 0x80, 0x8b, 0x61, 0x57, 0xa2, 0x57, 0x49, 0x73, 0x35, 0x58, 0xf1, 0xbc, 0xa9, 0x38, 0x5d, 0x4b, 0x96, 0xc8, 0x99, 0xe2, 0xaf }, new byte[] { 0xee, 0x52, 0x02, 0xfc, 0x4e, 0xdd, 0xac, 0x3d, 0xcc, 0x7d, 0xcb, 0xb9, 0xf2, 0xf2, 0x18, 0x57, 0x80, 0xe7, 0x3c, 0xb4, 0x1b, 0x47, 0x60, 0x88, 0x09, 0x51, 0xbf, 0xeb, 0x50, 0x0c, 0xa8, 0x66 }, new byte[] { 0x2c, 0x6d, 0x63, 0x3c, 0xad, 0x00, 0x80, 0x37, 0xc5, 0xaa, 0x7c, 0x03, 0x0c, 0xb5, 0x60, 0x72, 0xb6, 0xf4, 0xe2, 0x47, 0xec, 0xca, 0x31, 0x28, 0x4d, 0x7f, 0x5e, 0x81, 0x80, 0x67, 0xfa, 0xf6 }, new byte[] { 0x4f, 0x55, 0xc1, 0x80, 0x13, 0x1a, 0x0c, 0x86, 0x2a, 0x4a, 0xe2, 0xf0, 0x86, 0x1a, 0x37, 0x4b, 0xe1, 0xfd, 0xca, 0xf4, 0xe2, 0x06, 0xe0, 0xc5, 0xff, 0xcc, 0x66, 0xfe, 0x5f, 0x92, 0xec, 0x2b }, new byte[] { 0x3b, 0x9c, 0x57, 0xb7, 0xfe, 0x85, 0xf1, 0x9c, 0x8a, 0xdf, 0x34, 0x66, 0x03, 0xce, 0x58, 0xf9, 0xd0, 0x5d, 0x5f, 0x87, 0x23, 0x90, 0xe1, 0xac, 0xd9, 0x48, 0xb2, 0xd2, 0x51, 0xf2, 0x41, 0xbf }, new byte[] { 0xd2, 0x73, 0x93, 0xcb, 0xf2, 0xde, 0x32, 0x90, 0x58, 0x0a, 0xa1, 0xb4, 0xab, 0x93, 0x47, 0x53, 0x96, 0x6e, 0x18, 0xb2, 0xf5, 0xae, 0xb6, 0xec, 0x70, 0xb0, 0x17, 0x86, 0xd8, 0x50, 0xe1, 0xad }, new byte[] { 0x2b, 0x3e, 0xc9, 0x08, 0x05, 0xb7, 0xf1, 0x82, 0x18, 0xf6, 0x70, 0x9a, 0xcd, 0x48, 0xc9, 0x47, 0x0b, 0xa4, 0x8b, 0x5b, 0x65, 0xb5, 0x8e, 0x65, 0x51, 0xc8, 0x3d, 0xfd, 0x80, 0xa2, 0xf3, 0x2e })]
        [Theory]
        public void RatchetReferenceTest(byte[] nrk, byte[] rhk, byte[] nrhk, byte[] rck, byte[] shk, byte[] nshk, byte[] sck, byte[] _key, byte[] rpk, byte[] erck)
        {
            var key = new KeyAgreement(_key);
            var step0 = EcdhRatchetStep.Create(key, nrk,
                0, rhk, nrhk, rck,
                0, shk, nshk, sck);

            var step1 = step0.Ratchet(kaf, kdf, digest, rpk, new KeyAgreement(KeyGeneration.GeneratePrivateKey()));

            Assert.Equal(erck, step1.ReceivingChain.ChainKey);
        }

        [InlineData(new byte[] { 0xb0, 0xdc, 0x2a, 0x60, 0x56, 0xbf, 0xab, 0xff, 0xde, 0x55, 0x7d, 0xa4, 0x46, 0xfe, 0xc9, 0x96, 0xe4, 0xfb, 0xb4, 0x52, 0xbf, 0x43, 0xaa, 0xf3, 0x1f, 0xac, 0xd7, 0xe8, 0x70, 0xe2, 0xf2, 0x05 }, new byte[] { 0xd1, 0xa0, 0x7d, 0x7f, 0x3c, 0x62, 0x64, 0x07, 0xcf, 0xa1, 0xc7, 0xdc, 0x73, 0x0d, 0x34, 0xe0, 0x00, 0x1e, 0x68, 0x29, 0x1e, 0x3a, 0xcc, 0x58, 0x1c, 0x7b, 0xc5, 0xa3, 0x44, 0xe2, 0x24, 0x0c }, new byte[] { 0x2a, 0xde, 0x83, 0x32, 0x4e, 0x59, 0x27, 0x25, 0xca, 0xcb, 0x2c, 0x48, 0x6a, 0x7b, 0xd0, 0x69, 0xf4, 0x5e, 0x13, 0x28, 0x44, 0x17, 0x2e, 0xde, 0xe2, 0x77, 0x0c, 0xaa, 0x2a, 0x69, 0x7f, 0x03 }, new byte[] { 0x9f, 0x1a, 0x92, 0x33, 0xc6, 0xb6, 0x0d, 0x9d, 0x0d, 0x5b, 0x81, 0xbf, 0x74, 0x7a, 0xda, 0xc1, 0x77, 0x7c, 0x55, 0x44, 0xa3, 0x1e, 0x3a, 0x8d, 0x2b, 0x60, 0xce, 0x66, 0x92, 0x26, 0x45, 0x7f }, new byte[] { 0xcc, 0x65, 0x7c, 0x26, 0xb2, 0x35, 0xf4, 0x02, 0x06, 0xa4, 0xbb, 0xef, 0x09, 0x08, 0xf1, 0xc3, 0x08, 0x9c, 0xb0, 0x75, 0xda, 0x3d, 0x53, 0x37, 0xd0, 0x4c, 0x8c, 0xf7, 0x85, 0xf6, 0xf0, 0xcf }, new byte[] { 0xb0, 0x30, 0x0f, 0x09, 0xef, 0x0b, 0x9e, 0x80, 0x49, 0xba, 0x5e, 0xbe, 0xfe, 0x58, 0x8c, 0xfc, 0x88, 0x34, 0xf3, 0x36, 0xdc, 0x6a, 0x59, 0xbd, 0xe6, 0x6b, 0x15, 0x40, 0xa0, 0x85, 0xcb, 0x6e }, new byte[] { 0x86, 0x1f, 0x1d, 0x54, 0x6c, 0xf4, 0x32, 0xd4, 0xb1, 0x1e, 0x31, 0x11, 0x16, 0xd3, 0x46, 0xca, 0xe9, 0x6c, 0x98, 0x55, 0xfd, 0xac, 0x96, 0x08, 0x90, 0x97, 0xda, 0x32, 0x52, 0xe2, 0xd9, 0x7b }, new byte[] { 0x25, 0xc0, 0xf3, 0x15, 0x37, 0x54, 0x82, 0xdc, 0x0f, 0x9c, 0xd2, 0x40, 0xc7, 0xdc, 0x6d, 0x1d, 0xa7, 0xb9, 0x38, 0xce, 0x6b, 0x24, 0x22, 0xb7, 0x00, 0xbb, 0x31, 0x26, 0xf8, 0xe5, 0x8b, 0x88 }, new byte[] { 0x68, 0x3e, 0x3a, 0x26, 0x91, 0xc9, 0xd2, 0xad, 0x5c, 0x0e, 0xbe, 0x5f, 0x29, 0xc9, 0x7f, 0xbf, 0xb0, 0x41, 0x10, 0xe0, 0x80, 0xaa, 0x6d, 0xd5, 0x5e, 0x61, 0x17, 0x9d, 0xbc, 0x9e, 0x95, 0xa7 }, new byte[] { 0x0b, 0x0f, 0x98, 0x52, 0x45, 0x12, 0xb1, 0x77, 0x33, 0xa7, 0x4b, 0xf9, 0xe7, 0x34, 0xd2, 0xe6, 0x2e, 0x15, 0xd4, 0x20, 0x56, 0x73, 0xb4, 0xb2, 0x9d, 0x85, 0x65, 0x4f, 0x49, 0xf9, 0xbf, 0x02 }, new byte[] { 0xf5, 0x53, 0xae, 0xdf, 0x6d, 0x0d, 0xf0, 0xec, 0x94, 0x15, 0xcc, 0x48, 0xb8, 0xa0, 0xcc, 0xf4, 0x30, 0x51, 0x04, 0xf0, 0x68, 0x46, 0xc1, 0x9e, 0x19, 0x94, 0xc0, 0x37, 0x94, 0xa7, 0xd6, 0x63 })]
        [InlineData(new byte[] { 0x95, 0x1b, 0x7a, 0xe5, 0x76, 0xde, 0x59, 0x08, 0x6c, 0x92, 0x1d, 0xf9, 0x4c, 0x8d, 0xd2, 0xe9, 0x56, 0xdc, 0xd3, 0xb1, 0x2f, 0x46, 0xc8, 0x65, 0xc9, 0x89, 0xf8, 0x12, 0xb2, 0xce, 0xec, 0x45 }, new byte[] { 0x4c, 0xd2, 0xb8, 0xed, 0x6b, 0xfa, 0x44, 0xfe, 0xb4, 0xf4, 0xb2, 0x9b, 0x49, 0xd9, 0x28, 0xea, 0x85, 0x66, 0x7a, 0x87, 0x1c, 0x85, 0x6c, 0x43, 0x49, 0xd5, 0xd4, 0xba, 0x83, 0xb7, 0x72, 0xc0 }, new byte[] { 0x08, 0x6c, 0x33, 0xf7, 0x2b, 0x0d, 0x64, 0x99, 0x00, 0xba, 0x7d, 0xa8, 0xfc, 0x6b, 0x5e, 0xd3, 0xbc, 0xff, 0x0f, 0xab, 0x05, 0xc9, 0xdc, 0x94, 0x1d, 0xf6, 0xe5, 0x08, 0x71, 0x48, 0xaa, 0x78 }, new byte[] { 0x06, 0x70, 0xb5, 0x66, 0x1a, 0x0b, 0x90, 0x44, 0x7a, 0xc7, 0xda, 0xdc, 0xaf, 0xef, 0x6e, 0x5c, 0x00, 0xe7, 0x7a, 0x00, 0x65, 0xd6, 0xb7, 0x63, 0xa3, 0x32, 0xcf, 0xf0, 0x39, 0xcf, 0xfa, 0xed }, new byte[] { 0x22, 0xc4, 0x61, 0x6e, 0x49, 0x67, 0xfb, 0x7a, 0x70, 0x4c, 0xba, 0x12, 0xe3, 0xd4, 0x56, 0xed, 0xb0, 0xba, 0x1f, 0xc8, 0x59, 0xba, 0xe6, 0xed, 0x6c, 0xf0, 0x46, 0xeb, 0xd0, 0xe9, 0x10, 0xf7 }, new byte[] { 0x21, 0x4e, 0x5f, 0x9a, 0x7c, 0xef, 0xad, 0xc7, 0x72, 0xef, 0xf9, 0x22, 0x50, 0xc5, 0x5b, 0x1e, 0xf4, 0x7c, 0xb7, 0xcc, 0x58, 0x63, 0x25, 0xbc, 0xd8, 0xf1, 0xd7, 0x2d, 0xae, 0x71, 0xf9, 0x0e }, new byte[] { 0x74, 0xcb, 0xa8, 0x3b, 0xaf, 0x5f, 0x9c, 0xbb, 0x8c, 0x98, 0x5e, 0x11, 0xe7, 0x5a, 0x0d, 0x2b, 0x98, 0x40, 0x77, 0xc9, 0x6e, 0xe2, 0xfa, 0xd3, 0xb7, 0x54, 0x02, 0x97, 0x72, 0x7a, 0xf2, 0x1f }, new byte[] { 0x1d, 0xd7, 0xb3, 0xf4, 0x4d, 0xc9, 0xda, 0x02, 0xaf, 0xd0, 0x2a, 0x78, 0x7f, 0x4b, 0xe9, 0x6a, 0x33, 0x2a, 0xdd, 0x26, 0x2b, 0x0d, 0x79, 0xee, 0x9f, 0xd5, 0xd2, 0xef, 0x87, 0x6a, 0xa1, 0x7a }, new byte[] { 0x73, 0xf8, 0xde, 0x1a, 0xb2, 0x50, 0x48, 0x6c, 0x1f, 0x21, 0x2b, 0x2e, 0xae, 0x39, 0x2e, 0x27, 0xde, 0x79, 0xb5, 0xd0, 0xe8, 0x4a, 0x04, 0x6e, 0xbf, 0x47, 0x7c, 0x74, 0x16, 0x74, 0x96, 0xd2 }, new byte[] { 0x37, 0x94, 0x7d, 0x5b, 0x16, 0x11, 0x35, 0x60, 0xcb, 0x1b, 0x4d, 0x51, 0xcf, 0xcc, 0x86, 0xc7, 0x99, 0x64, 0xaa, 0x38, 0x21, 0x4d, 0x75, 0x3e, 0x74, 0xac, 0x25, 0xe5, 0x7d, 0x48, 0xf5, 0x02 }, new byte[] { 0xac, 0x11, 0xc3, 0xbb, 0x08, 0xba, 0x68, 0x89, 0x81, 0xfc, 0x68, 0x5f, 0xcb, 0x1b, 0x1a, 0x5c, 0x41, 0x20, 0xbd, 0x1b, 0x21, 0x66, 0xd8, 0x46, 0xbd, 0x56, 0x89, 0xfc, 0xa7, 0xcb, 0xb3, 0x08 })]
        [InlineData(new byte[] { 0x48, 0xd6, 0x02, 0xe1, 0x90, 0x84, 0x9b, 0x03, 0x1d, 0x4d, 0x63, 0xaa, 0xce, 0x9a, 0x13, 0x25, 0xaa, 0xb3, 0x4c, 0xd0, 0x9f, 0x50, 0x66, 0xe7, 0xe1, 0xd6, 0x3e, 0xf0, 0x66, 0x30, 0x04, 0x20 }, new byte[] { 0x85, 0x4e, 0x36, 0x8e, 0x95, 0x4b, 0x0a, 0x27, 0xd6, 0xa9, 0x88, 0x90, 0xfb, 0xa3, 0xb4, 0x85, 0x3e, 0xc3, 0xdf, 0x27, 0x4a, 0x33, 0x7c, 0xae, 0x9a, 0x19, 0x92, 0x5f, 0x68, 0x9d, 0x23, 0xc3 }, new byte[] { 0xd2, 0x4e, 0xb3, 0x71, 0xbe, 0x0f, 0xa9, 0x11, 0x26, 0x1e, 0x20, 0x88, 0x61, 0x2f, 0xa6, 0x79, 0x14, 0x2d, 0xeb, 0xce, 0x18, 0x75, 0x3a, 0x89, 0xae, 0xea, 0x7e, 0xf0, 0x18, 0xec, 0xb4, 0xb6 }, new byte[] { 0x40, 0x68, 0xde, 0x6a, 0xcd, 0xf2, 0x44, 0x1a, 0x46, 0x98, 0xf0, 0xc9, 0x9c, 0xec, 0xa8, 0x55, 0xeb, 0xf3, 0xb5, 0xc0, 0xdc, 0xfd, 0x0f, 0x4f, 0x7e, 0x76, 0xab, 0x5d, 0xe7, 0x98, 0xd9, 0xa9 }, new byte[] { 0x48, 0x0f, 0x92, 0x12, 0xc7, 0x27, 0x4b, 0xda, 0x04, 0xe6, 0xdb, 0xa7, 0x39, 0xf0, 0x52, 0xb4, 0xe6, 0xaa, 0x50, 0x92, 0xb4, 0x5d, 0x48, 0x39, 0x0e, 0x20, 0x63, 0x17, 0x77, 0x51, 0xb0, 0x5a }, new byte[] { 0x6e, 0x99, 0x7e, 0x2e, 0x8f, 0x3e, 0x39, 0x17, 0x1c, 0xdf, 0x7f, 0xf2, 0x41, 0x64, 0x59, 0x1a, 0xa8, 0xac, 0x99, 0xf0, 0x10, 0xad, 0x70, 0x2c, 0x39, 0x26, 0x39, 0x08, 0xfd, 0x71, 0x11, 0x31 }, new byte[] { 0xad, 0x36, 0x7f, 0x89, 0x46, 0x7d, 0x76, 0x4e, 0xe5, 0xd6, 0xcf, 0xc6, 0x97, 0x27, 0x92, 0xba, 0x68, 0x07, 0x50, 0x41, 0xc4, 0x68, 0x2c, 0x88, 0x5c, 0x8b, 0xfa, 0xd4, 0x7e, 0x9b, 0x81, 0xbb }, new byte[] { 0x1e, 0x9b, 0x79, 0x62, 0x16, 0xe0, 0xa8, 0xeb, 0x81, 0x82, 0xed, 0x42, 0xe9, 0x44, 0x59, 0x2a, 0xeb, 0x3c, 0xd5, 0xae, 0xe3, 0x8a, 0x6a, 0xd8, 0x22, 0x36, 0xc8, 0xdb, 0x8f, 0x8a, 0x27, 0x0f }, new byte[] { 0xdb, 0xde, 0x44, 0x65, 0x31, 0x6a, 0x1c, 0xc6, 0x82, 0xf4, 0xc5, 0x20, 0xca, 0xcf, 0x4e, 0x88, 0x08, 0x1b, 0xdb, 0xae, 0x02, 0xca, 0x95, 0x0e, 0xd9, 0x32, 0x00, 0xb0, 0x4f, 0xb8, 0xae, 0x2f }, new byte[] { 0x34, 0xac, 0x72, 0x46, 0x32, 0x6b, 0x88, 0x9a, 0x31, 0x41, 0xe3, 0xea, 0x6a, 0xb0, 0x58, 0x2e, 0x65, 0x70, 0x7e, 0x4e, 0xd9, 0x69, 0x97, 0x75, 0x20, 0x7e, 0x42, 0x29, 0x66, 0xff, 0x9d, 0x47 }, new byte[] { 0xf8, 0x3a, 0xe0, 0x43, 0xea, 0x6b, 0x06, 0x1a, 0x4c, 0xf3, 0x03, 0x83, 0x38, 0x60, 0x7c, 0x8c, 0x1e, 0x1a, 0x3e, 0x72, 0x63, 0x0f, 0x7c, 0xf4, 0xf8, 0x24, 0x69, 0xb8, 0xfe, 0x20, 0x1a, 0x22 })]
        [Theory]
        public void RatchetReferenceTest2(byte[] nrk, byte[] rhk, byte[] nrhk, byte[] rck, byte[] shk, byte[] nshk, byte[] sck, byte[] _key, byte[] rpk, byte[] _nkey, byte[] esck)
        {
            var key = new KeyAgreement(_key);
            var nkey = new KeyAgreement(_nkey);
            var step0 = EcdhRatchetStep.Create(key, nrk,
                0, rhk, nrhk, rck,
                0, shk, nshk, sck);

            var step1 = step0.Ratchet(kaf, kdf, digest, rpk, nkey);

            Assert.Equal(esck, step1.SendingChain.ChainKey);
        }

        [InlineData(new byte[] { 0x75, 0x0f, 0x38, 0x5a, 0x71, 0x05, 0x55, 0xf1, 0xe2, 0x29, 0x32, 0x9a, 0x11, 0xb3, 0x52, 0xac, 0x3e, 0x89, 0x57, 0xf7, 0x5d, 0x75, 0xc2, 0x30, 0x1e, 0xec, 0x19, 0x2c, 0xd1, 0x9e, 0xf4, 0x51 }, new byte[] { 0x2c, 0x11, 0x95, 0xfa, 0x69, 0xb9, 0x7c, 0xac, 0x69, 0xcb, 0x41, 0x20, 0xdc, 0x02, 0xd4, 0x72, 0x9a, 0xd9, 0x4f, 0xcc, 0x7d, 0xe8, 0xca, 0xb1, 0xeb, 0x58, 0xd1, 0x78, 0xc4, 0x8c, 0xe6, 0x82 }, new byte[] { 0x6c, 0xba, 0xba, 0x66, 0x89, 0x39, 0xdf, 0xb5, 0xf9, 0x00, 0x4c, 0x6c, 0xfa, 0x74, 0x6e, 0x8c, 0x7a, 0xab, 0x1d, 0xe0, 0xf1, 0xd0, 0x67, 0x7c, 0x1e, 0x67, 0xbd, 0x95, 0x50, 0xe6, 0x73, 0x07 }, new byte[] { 0x70, 0x06, 0x2a, 0xd4, 0x27, 0x4f, 0xf4, 0x11, 0xbb, 0x41, 0x72, 0x88, 0xaa, 0xfd, 0xb0, 0xbc, 0x97, 0x57, 0xe7, 0xdb, 0x30, 0xbe, 0x03, 0x67, 0x5e, 0x8e, 0xb3, 0x2f, 0x67, 0x44, 0xfc, 0xc5 }, new byte[] { 0x36, 0xde, 0x1d, 0x00, 0xb3, 0x24, 0x26, 0x6c, 0xf2, 0xf5, 0xc8, 0x45, 0x35, 0x77, 0x65, 0x6b, 0x59, 0x83, 0x78, 0xd6, 0x14, 0x84, 0xdf, 0xd6, 0x1e, 0x4d, 0xec, 0x12, 0x09, 0x97, 0x89, 0x90 }, new byte[] { 0x6e, 0xa9, 0x6f, 0xf3, 0x80, 0xa5, 0xff, 0x3e, 0xae, 0x1a, 0xc2, 0x20, 0xb7, 0x87, 0x5f, 0x6c, 0x98, 0xa7, 0xcd, 0x98, 0xb9, 0xed, 0x27, 0x38, 0x8c, 0x0f, 0x96, 0x1f, 0xc0, 0xf8, 0x34, 0xf5 }, new byte[] { 0x37, 0x7b, 0xcc, 0x28, 0x6a, 0xac, 0x57, 0xc2, 0xd4, 0x1b, 0x0b, 0xd9, 0x21, 0xa1, 0xe6, 0x33, 0x01, 0x7e, 0x11, 0x09, 0xcd, 0x9a, 0xd7, 0xb0, 0xfa, 0xab, 0x17, 0xee, 0x18, 0xc5, 0x82, 0x90 }, new byte[] { 0xb0, 0x96, 0x14, 0xfe, 0x45, 0x5c, 0x19, 0x1c, 0x52, 0x44, 0xdd, 0x33, 0xc6, 0x68, 0x5b, 0xc4, 0x91, 0x0d, 0x88, 0xba, 0x9b, 0x23, 0xf7, 0xdb, 0x34, 0xa5, 0x82, 0xe9, 0xcf, 0x0b, 0xf8, 0xcd }, new byte[] { 0xab, 0xa2, 0xc2, 0xc1, 0xfa, 0xc0, 0xbf, 0x34, 0x62, 0x5e, 0x7d, 0xf0, 0xe4, 0xfc, 0x82, 0x5e, 0x86, 0x61, 0x8b, 0x06, 0xdc, 0x4f, 0xd1, 0x82, 0xbe, 0x28, 0xe4, 0x29, 0x4f, 0x50, 0xdd, 0x98 })]
        [InlineData(new byte[] { 0x0d, 0x1f, 0x40, 0xf7, 0x97, 0x61, 0x91, 0x89, 0x5e, 0x4a, 0x09, 0x37, 0x98, 0xe3, 0x08, 0x83, 0xaa, 0x77, 0xdc, 0x72, 0x4a, 0x78, 0xb5, 0xe8, 0x4c, 0x82, 0xe5, 0xae, 0x32, 0xa9, 0x58, 0x28 }, new byte[] { 0xab, 0x8c, 0xfa, 0x1e, 0xd8, 0x58, 0x5c, 0x34, 0x2f, 0x9f, 0xd8, 0xa3, 0x98, 0x80, 0xfa, 0xd7, 0x09, 0xb1, 0x7e, 0xb9, 0xc4, 0x60, 0x55, 0x32, 0x1b, 0x09, 0x61, 0xa1, 0xa9, 0xbc, 0x2e, 0x78 }, new byte[] { 0xd7, 0x4d, 0xda, 0xdc, 0xc0, 0xf8, 0x71, 0x49, 0x41, 0x3c, 0x4a, 0xe8, 0x73, 0x75, 0x82, 0x4b, 0x60, 0xe6, 0x48, 0x0b, 0x45, 0xb3, 0x56, 0x2a, 0xba, 0x38, 0x8e, 0xec, 0x7d, 0xeb, 0x7a, 0xc9 }, new byte[] { 0x42, 0x8f, 0x09, 0xee, 0xbd, 0x6b, 0x4f, 0x34, 0xf6, 0xb3, 0x46, 0xc2, 0x26, 0xff, 0xc6, 0x5e, 0x7f, 0xd7, 0xda, 0x16, 0x07, 0x59, 0x37, 0xe4, 0xd9, 0x81, 0x7f, 0x5a, 0xf8, 0xd3, 0xa4, 0x45 }, new byte[] { 0x7a, 0x59, 0x83, 0x93, 0xe6, 0xfa, 0xf9, 0x76, 0x1a, 0x04, 0x99, 0x28, 0x81, 0x7c, 0xd7, 0x20, 0xf1, 0x6c, 0x6d, 0xa6, 0x30, 0x9c, 0x33, 0xd7, 0xe2, 0x07, 0x94, 0x08, 0x4e, 0x08, 0x1a, 0x81 }, new byte[] { 0x6b, 0x89, 0x42, 0x61, 0x7b, 0xd6, 0x5a, 0x4b, 0x58, 0xaa, 0xbe, 0xe8, 0x2b, 0x72, 0x00, 0xc1, 0x16, 0x0c, 0x34, 0x91, 0x61, 0x38, 0xc6, 0xfa, 0xbe, 0x53, 0x59, 0x17, 0xe7, 0x7a, 0x3b, 0xf1 }, new byte[] { 0x06, 0xf8, 0x3d, 0x51, 0xe9, 0x2c, 0x36, 0x00, 0x4b, 0x95, 0x2c, 0x94, 0x36, 0x91, 0x3f, 0xae, 0x6b, 0xd1, 0xe7, 0x37, 0x7c, 0xbc, 0xa3, 0xc9, 0xeb, 0x6d, 0x2c, 0x5e, 0x51, 0x09, 0xed, 0x12 }, new byte[] { 0xa4, 0x47, 0xd9, 0x4c, 0x68, 0x5e, 0x11, 0x1d, 0xe2, 0x38, 0x11, 0xb6, 0x36, 0xc0, 0x28, 0x6e, 0xb3, 0xed, 0xcb, 0x7b, 0xf0, 0xe2, 0xbf, 0x64, 0x64, 0x43, 0x7a, 0x47, 0xe4, 0x78, 0x7b, 0x34 }, new byte[] { 0x6b, 0x5a, 0x33, 0xf5, 0xa5, 0x5d, 0xd0, 0x3d, 0x8a, 0x70, 0x01, 0xda, 0x5d, 0x43, 0x9c, 0x1e, 0xd8, 0x0b, 0xdc, 0x2b, 0x8a, 0x9c, 0x1f, 0x63, 0x03, 0xaa, 0x4f, 0x0e, 0x52, 0x10, 0xf6, 0x4a })]
        [InlineData(new byte[] { 0xb3, 0xac, 0x51, 0xd1, 0x09, 0x0f, 0x52, 0x00, 0x68, 0x1b, 0xd8, 0x91, 0x00, 0xde, 0x81, 0x21, 0x92, 0x63, 0x12, 0xbf, 0xf2, 0x66, 0x01, 0x6e, 0xfd, 0x4f, 0xf8, 0x4b, 0x52, 0xeb, 0xdf, 0x48 }, new byte[] { 0xeb, 0xe7, 0xc3, 0xe4, 0x8a, 0x3a, 0x12, 0xcb, 0xab, 0x80, 0x8f, 0xd6, 0xf3, 0x13, 0xc6, 0x43, 0xca, 0x1f, 0x74, 0x2c, 0xfc, 0x59, 0x09, 0x41, 0xa6, 0x74, 0x0d, 0x88, 0x64, 0xf2, 0x05, 0x42 }, new byte[] { 0x84, 0x4d, 0x35, 0xbb, 0x62, 0x5f, 0x4e, 0xa8, 0x7a, 0x68, 0x7b, 0x78, 0x21, 0xd5, 0x6d, 0x93, 0x84, 0xc3, 0x4c, 0x94, 0xf8, 0x3d, 0x48, 0x37, 0x79, 0xe7, 0x83, 0xff, 0xf7, 0x2d, 0x7d, 0xd1 }, new byte[] { 0x22, 0x3c, 0x49, 0xd3, 0x3b, 0x2d, 0x78, 0x63, 0x68, 0xb3, 0xf9, 0x02, 0x76, 0xb3, 0x16, 0xbb, 0x2b, 0xc8, 0x68, 0x1c, 0xda, 0x96, 0x11, 0x64, 0xf1, 0xa4, 0xb8, 0xe2, 0x4e, 0xc1, 0x79, 0xd1 }, new byte[] { 0x35, 0xb2, 0x2e, 0x99, 0xfb, 0x4f, 0x9c, 0xd1, 0x77, 0xd0, 0x9d, 0xbd, 0x13, 0x96, 0xaf, 0x19, 0xd6, 0x9d, 0x4b, 0x49, 0xd5, 0xff, 0x3c, 0x8e, 0x6b, 0xea, 0x24, 0xf1, 0x38, 0xf0, 0xb8, 0x77 }, new byte[] { 0x53, 0x52, 0xdc, 0x03, 0x38, 0x46, 0xf8, 0x5b, 0x81, 0xbe, 0xc7, 0x61, 0xe9, 0xb3, 0xa5, 0xe3, 0x68, 0xab, 0x0a, 0x8c, 0x4e, 0x70, 0x41, 0x61, 0x13, 0xea, 0x3e, 0x14, 0xfb, 0xe2, 0x96, 0xe0 }, new byte[] { 0x71, 0xae, 0xf3, 0x8f, 0x10, 0xb7, 0xe5, 0x7c, 0x01, 0x90, 0xa0, 0x56, 0xc0, 0x8a, 0xe9, 0xfa, 0xae, 0xcb, 0xbf, 0x78, 0x2a, 0x8b, 0x14, 0x21, 0xa2, 0x6f, 0x52, 0x5c, 0x47, 0x93, 0x19, 0xf8 }, new byte[] { 0x3a, 0xd8, 0xea, 0x74, 0xb8, 0x72, 0x58, 0x61, 0x8b, 0x59, 0x48, 0x6e, 0x11, 0x11, 0x70, 0x30, 0xb6, 0xfe, 0x8b, 0x78, 0xa7, 0xa8, 0x4d, 0x34, 0xf4, 0x33, 0x67, 0x27, 0x69, 0x0b, 0xb4, 0xbf }, new byte[] { 0x96, 0xba, 0x86, 0xfb, 0xc2, 0x5f, 0x87, 0x0a, 0x90, 0xa5, 0x41, 0x67, 0xf0, 0x60, 0x3b, 0xcf, 0xe6, 0xd0, 0x05, 0xef, 0x4b, 0xc6, 0x77, 0x30, 0x19, 0x75, 0xa0, 0xae, 0xec, 0xb0, 0x26, 0x59 })]
        [Theory]
        public void InitialChainSymmetryReferenceTest(byte[] rk, byte[] rhk, byte[] shk, byte[] _skey1, byte[] _skey2, byte[] _ckey1, byte[] _ckey2, byte[] rckey, byte[] sckey)
        {
            var skey1 = new KeyAgreement(_skey1);
            var skey2 = new KeyAgreement(_skey2);
            var ckey1 = new KeyAgreement(_ckey1);
            var ckey2 = new KeyAgreement(_ckey2);
            byte[] spub1 = skey1.GetPublicKey();
            byte[] spub2 = skey2.GetPublicKey();
            byte[] cpub1 = ckey1.GetPublicKey();
            byte[] cpub2 = ckey2.GetPublicKey();
            var secdhstep = EcdhRatchetStep.InitializeServer(kdf, digest,
                skey1, rk, cpub1, skey2, rhk, shk);
            var cecdhsteps = EcdhRatchetStep.InitializeClient(kdf, digest,
                rk, spub1, spub2, ckey1, shk, rhk, ckey2);

            Assert.Equal(rckey, secdhstep.ReceivingChain.ChainKey);
            Assert.Equal(rckey, cecdhsteps[0].SendingChain.ChainKey);
            Assert.Equal(sckey, secdhstep.SendingChain.ChainKey);
            Assert.Equal(sckey, cecdhsteps[1].ReceivingChain.ChainKey);
        }
    }
}
