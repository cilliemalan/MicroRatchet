using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using Xunit;

namespace MicroRatchet.Tests
{
    public class KeyAgreementTests
    {
        [Fact]
        public void BasicTest()
        {
            byte[] priKey1 = KeyGeneration.GeneratePrivateKey();
            byte[] priKey2 = KeyGeneration.GeneratePrivateKey();

            var ke1 = new KeyAgreement(priKey1);
            var ke2 = new KeyAgreement(priKey2);

            var pub1 = ke1.GetPublicKey();
            var pub2 = ke2.GetPublicKey();

            var k1 = ke1.DeriveKey(pub2);
            var k2 = ke2.DeriveKey(pub1);

            Assert.NotEqual(priKey1, priKey2);
            Assert.NotEqual(pub1, pub2);
            Assert.Equal(k1, k2);
        }

        [Fact]
        public void RepeatabilityTest()
        {
            Enumerable.Range(0, 30)
                .AsParallel()
                .ForAll(i =>
                {
                    BasicTest();
                });
        }

        [Fact]
        public void DisposeTest()
        {
            byte[] priKey = KeyGeneration.GeneratePrivateKey();
            var ke = new KeyAgreement(priKey);
            ke.Dispose();
            Assert.Throws<ObjectDisposedException>(() => ke.GetPublicKey());
            Assert.Throws<ObjectDisposedException>(() => ke.DeriveKey(new byte[0]));
        }

        [InlineData(new byte[] { 0x30, 0xe1, 0x98, 0x9b, 0xc5, 0x9b, 0xd1, 0x77, 0x7e, 0x18, 0x54, 0x90, 0x55, 0xf2, 0x64, 0x57, 0xe3, 0x07, 0xa2, 0xfa, 0xb7, 0xcd, 0x5a, 0xe8, 0xd3, 0x8e, 0x54, 0x9b, 0xfa, 0x37, 0xd1, 0x0c }, new byte[] { 0x64, 0x0b, 0x82, 0xdc, 0x4b, 0x91, 0xc0, 0x08, 0x93, 0x05, 0x10, 0x9b, 0x63, 0x18, 0xd7, 0xd9, 0x0e, 0x03, 0xb1, 0x60, 0x47, 0x1a, 0x8a, 0x63, 0x5b, 0x8b, 0x2f, 0xdb, 0xe0, 0xf4, 0x34, 0x13 }, new byte[] { 0x49, 0xf7, 0xfc, 0x31, 0xfc, 0x9c, 0x7b, 0x34, 0x70, 0x4b, 0x0c, 0x90, 0xe5, 0x4d, 0x89, 0xa9, 0x1b, 0x79, 0x51, 0x82, 0x3c, 0xd4, 0x1e, 0x28, 0xb5, 0x9f, 0x18, 0xc5, 0xc9, 0xa2, 0x42, 0x56 })]
        [InlineData(new byte[] { 0x48, 0x3e, 0x29, 0x5a, 0x4c, 0xe7, 0xb1, 0x4f, 0x07, 0x77, 0x0e, 0x78, 0x00, 0xfc, 0x21, 0x98, 0x0c, 0x74, 0x2b, 0x3e, 0x29, 0x8a, 0xc8, 0x86, 0xfb, 0xf8, 0x75, 0x50, 0x75, 0x86, 0xd8, 0x47 }, new byte[] { 0x27, 0x2d, 0x84, 0xff, 0x19, 0xde, 0x0b, 0x8d, 0x70, 0x2f, 0x4a, 0x79, 0x9e, 0xbd, 0xb4, 0x88, 0x1d, 0xc4, 0x71, 0x71, 0xe8, 0x1b, 0x8b, 0xc4, 0x86, 0x50, 0x53, 0x0d, 0x01, 0xfa, 0x1a, 0x6b }, new byte[] { 0xb0, 0x9d, 0x31, 0xc9, 0x77, 0x17, 0x49, 0x5e, 0x9b, 0x3e, 0xbd, 0x3e, 0x30, 0x4c, 0x44, 0x63, 0x7c, 0xa8, 0xfe, 0x78, 0xfc, 0xcc, 0xe3, 0x24, 0x78, 0xed, 0x4e, 0xaf, 0xb9, 0x46, 0xa4, 0xda })]
        [InlineData(new byte[] { 0x29, 0x73, 0xae, 0xe5, 0x86, 0x4d, 0x54, 0x3a, 0x64, 0x3a, 0xd7, 0x7f, 0xf5, 0xfa, 0x86, 0xaa, 0x8f, 0xc1, 0x0e, 0x70, 0x6b, 0xa5, 0x79, 0xed, 0xfa, 0x14, 0xd7, 0xca, 0x10, 0xd0, 0x99, 0xc7 }, new byte[] { 0x03, 0x55, 0x41, 0x53, 0x10, 0x92, 0x62, 0xaf, 0xf8, 0xa4, 0x0f, 0x62, 0xa2, 0x4d, 0xa6, 0xd4, 0x4a, 0xa4, 0x01, 0xa7, 0xd4, 0xbe, 0x06, 0x2c, 0x07, 0x60, 0x94, 0x3a, 0xf7, 0xa6, 0x8a, 0x41 }, new byte[] { 0xe6, 0x64, 0xde, 0xf0, 0x37, 0xb4, 0x98, 0xb7, 0xad, 0x08, 0xd8, 0xb4, 0xde, 0x41, 0x1e, 0x54, 0x35, 0xef, 0xa9, 0x1a, 0xce, 0x7a, 0xd9, 0xf5, 0x86, 0xf4, 0xe7, 0x3b, 0x8e, 0xeb, 0xff, 0xe3 })]
        [InlineData(new byte[] { 0x42, 0xc1, 0x8b, 0xf9, 0x20, 0xdc, 0xa9, 0x39, 0xeb, 0x8f, 0x20, 0x17, 0xbf, 0xd5, 0xf2, 0xe2, 0xaf, 0x4a, 0x25, 0x84, 0xf7, 0x28, 0x52, 0x3b, 0xc9, 0xf0, 0xe3, 0x9a, 0x7e, 0xd0, 0x06, 0xa0 }, new byte[] { 0x33, 0xa6, 0x5a, 0xaa, 0xa5, 0x6b, 0xb5, 0x5d, 0xd7, 0xca, 0x59, 0x41, 0x45, 0x0b, 0xd5, 0xa6, 0xab, 0x17, 0x7c, 0x9d, 0x73, 0x6b, 0xc3, 0x77, 0x8a, 0x42, 0xfe, 0xac, 0x83, 0xa6, 0xcf, 0xfe }, new byte[] { 0xf0, 0x26, 0x3d, 0x26, 0xd1, 0xff, 0xd8, 0x94, 0x80, 0xce, 0x88, 0x95, 0x96, 0x90, 0xb3, 0x23, 0xf6, 0x30, 0xd4, 0xd8, 0x24, 0xf2, 0x65, 0x4e, 0xb6, 0xeb, 0x03, 0x10, 0xce, 0xf5, 0xef, 0x94 })]
        [InlineData(new byte[] { 0x24, 0xb8, 0x32, 0xe2, 0xd4, 0x48, 0x94, 0x27, 0x63, 0xa7, 0x10, 0x78, 0x28, 0x28, 0xa1, 0xba, 0x6a, 0xe1, 0x66, 0x86, 0xa5, 0x80, 0xf2, 0xf3, 0x0a, 0x0b, 0x85, 0x98, 0x56, 0x48, 0x69, 0xc8 }, new byte[] { 0x65, 0xa5, 0xdd, 0xc4, 0x1d, 0x06, 0x36, 0xb0, 0x97, 0xa1, 0x9e, 0x54, 0x38, 0xdb, 0x72, 0x63, 0x21, 0x47, 0x29, 0x85, 0x57, 0x28, 0x05, 0x3b, 0x13, 0xe1, 0x51, 0x56, 0xe3, 0xb7, 0xbf, 0xcd }, new byte[] { 0x94, 0x57, 0x95, 0x48, 0x6d, 0x93, 0xcc, 0xcd, 0xe6, 0x1e, 0xb2, 0xe2, 0x18, 0x21, 0x66, 0xca, 0xc7, 0x3e, 0x5f, 0xea, 0xb2, 0xb8, 0x9d, 0xda, 0x8a, 0xae, 0xbc, 0x30, 0x29, 0xfb, 0xe8, 0xe1 })]
        [InlineData(new byte[] { 0x42, 0x21, 0x78, 0x77, 0x05, 0x6e, 0x0e, 0xc3, 0x29, 0x98, 0x71, 0xe1, 0xd0, 0x1c, 0xff, 0x30, 0x31, 0xb0, 0x91, 0x47, 0x70, 0xc3, 0x2a, 0xb0, 0xb0, 0x65, 0x62, 0x2b, 0x80, 0xac, 0x49, 0xd4 }, new byte[] { 0x82, 0x04, 0x51, 0xa1, 0xe7, 0x4f, 0xf7, 0x83, 0x5d, 0xd6, 0x4b, 0xe7, 0x2a, 0x64, 0x58, 0x24, 0xd9, 0x64, 0x02, 0x34, 0xf2, 0x2c, 0x05, 0xc0, 0x23, 0x2f, 0x47, 0x1d, 0xff, 0x72, 0x89, 0xee }, new byte[] { 0xb5, 0xb0, 0x8e, 0xeb, 0xa8, 0xa5, 0x31, 0xf1, 0xed, 0xae, 0xfb, 0xa4, 0x2a, 0x74, 0x0b, 0xf3, 0xb8, 0x67, 0x3d, 0xdd, 0x7a, 0xab, 0xcd, 0xf8, 0xdd, 0xcc, 0x1d, 0x4c, 0x79, 0x2c, 0x3f, 0x2e })]
        [InlineData(new byte[] { 0x21, 0x42, 0xf1, 0x77, 0xe2, 0x07, 0xc7, 0x92, 0xa0, 0xba, 0x70, 0xde, 0x6c, 0x87, 0x46, 0xec, 0x30, 0xf3, 0x38, 0xf8, 0x05, 0x74, 0x84, 0x0e, 0xa1, 0xb4, 0xf4, 0xb2, 0x45, 0xd2, 0xa9, 0x30 }, new byte[] { 0x92, 0x8a, 0x4a, 0x75, 0x3f, 0xa3, 0xd1, 0x39, 0xcb, 0xdd, 0x4b, 0x27, 0x89, 0x5d, 0x16, 0x14, 0x4c, 0x13, 0x07, 0x67, 0x91, 0x7a, 0x57, 0xf0, 0xc3, 0x3e, 0x8a, 0x9c, 0x44, 0x8f, 0xbb, 0xa0 }, new byte[] { 0x00, 0x1c, 0x73, 0xb2, 0x63, 0x42, 0x5d, 0xa5, 0x11, 0xb4, 0x02, 0x76, 0x93, 0x0f, 0x1d, 0xe5, 0x1a, 0xdc, 0x02, 0xb4, 0xb2, 0xed, 0x91, 0x17, 0x41, 0xee, 0xc5, 0xe0, 0x6c, 0xbc, 0xea, 0x0e })]
        [Theory]
        public void ReferenceTests(byte[] pri, byte[] pub, byte[] expected)
        {
            var prik = KeyAgreement.Deserialize(new MemoryStream(pri));
            var der = prik.DeriveKey(new ArraySegment<byte>(pub));

            Assert.Equal(expected, der);
        }
    }
}
