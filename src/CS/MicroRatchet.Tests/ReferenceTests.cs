using MicroRatchet.BouncyCastle;
using Org.BouncyCastle.Crypto.Prng;
using Org.BouncyCastle.Security;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Text;
using Xunit;

namespace MicroRatchet.Tests
{
    public class ReferenceTests
    {
        [Fact]
        public void ReferenceTest1()
        {
            var message1 = new byte[] { 0x3c, 0x07, 0x3f, 0x70, 0xe7, 0xee, 0x7f, 0x88, 0x34, 0x14, 0x8e, 0x1a, 0xb8, 0xb4, 0xd4, 0x33 };
            var message2 = new byte[] { 0x73, 0x17, 0xa6, 0x4a, 0x5c, 0xb5, 0x1c, 0x5f, 0xda, 0x61, 0x33, 0x4e, 0xde, 0x38, 0x54, 0x97, 0xc6, 0x95, 0x14, 0xc6, 0x4b, 0x60, 0xf8, 0xd5, 0x32, 0x37, 0x38, 0xc8, 0x01, 0x38, 0x28, 0x8b };
            var message3 = new byte[] { 0x32, 0x12, 0x57, 0x18, 0x87, 0xa2, 0x26, 0x2a, 0x91, 0x3e, 0xf1, 0xa5, 0x07, 0x76, 0x0f, 0x6d, 0xa2, 0x09, 0x6a, 0x7b, 0xa4, 0x59, 0x5d, 0xc6, 0x2b, 0xca, 0x0e, 0xce, 0xd2, 0xf7, 0xb3, 0x4f, 0x01, 0x52, 0x1c, 0x07, 0x59, 0x06, 0x7b, 0x2a, 0x4c, 0x57, 0xeb, 0x45, 0x64, 0x37, 0x9c, 0xe5, 0x22, 0xcd, 0x77, 0x19, 0x29, 0xe3, 0x6e, 0x21, 0xbf, 0x11, 0x40, 0x6a, 0x89, 0xc8, 0x8f, 0xb0, 0x2b, 0x8e, 0x2a, 0x33, 0x2c, 0xce, 0x24, 0x9f, 0xed, 0xec, 0x3a, 0x50, 0xae, 0x69, 0xcd, 0x99, 0xac, 0x92, 0xd7, 0xaa, 0xe7, 0xca, 0xbf, 0x7b, 0xc4, 0x36, 0xd7, 0xd8, 0x16, 0xf4, 0x59, 0x30, 0xc4, 0x8c, 0x10, 0x66, 0x6a, 0xb6, 0xf2, 0x18, 0x69, 0x8c, 0xae, 0x38, 0x32, 0x54, 0x12, 0xcb, 0x5c, 0xc7, 0x92, 0x3b, 0x3a, 0x71, 0xa4, 0xfd, 0x81, 0x46, 0xf6, 0x7d, 0xf9, 0x97, 0xeb, 0xf2, 0x5c, 0xfc, 0x4f, 0x3c, 0x9c, 0x6f, 0xd8, 0x42, 0x24, 0x11, 0x16, 0xbd, 0xaa, 0x38, 0x0f, 0x0e, 0xe2, 0x92, 0x83, 0x54, 0x0f, 0xd3, 0x6e, 0xe5, 0x2a, 0x36, 0x77, 0x14, 0x80, 0x5e, 0xf9, 0x1f, 0x5b, 0xd0, 0xb5, 0xb5, 0x57, 0x5b, 0xf1, 0x79, 0xf8, 0x30, 0x74, 0xb6, 0xbf, 0xcb, 0x4c, 0x66, 0x32, 0xeb, 0x3a, 0xed, 0x80, 0x5b, 0xd6, 0xd8, 0x57, 0xf8, 0xec, 0xf8, 0x53, 0x05, 0x9a, 0xcc, 0x7b, 0x73, 0x9a, 0xfc, 0xe3, 0x40, 0xef, 0xbb, 0x96, 0x7a, 0x98, 0x9d, 0x73, 0x1b, 0x88, 0x40, 0xbd, 0x94, 0xfc, 0x21, 0x0b, 0x0c, 0xba, 0xf6, 0xc8, 0x53, 0x3a, 0xdf, 0x1a, 0x87, 0xdc, 0xfe, 0x15, 0xa7, 0xbc, 0x0e, 0x3b, 0x3a, 0x67, 0x3b, 0x40, 0xfd, 0xab, 0xa8, 0x75, 0xa0, 0xbf, 0x6a };

            var randomC = new byte[] { 0xd4, 0xf7, 0xd4, 0x89, 0x86, 0xdc, 0x90, 0xc8, 0x62, 0x5b, 0xb7, 0x8d, 0xc5, 0x25, 0x51, 0xd4, 0xc2, 0x1d, 0xf7, 0x81, 0x97, 0x33, 0x27, 0x6c, 0x37, 0x00, 0x8d, 0x3e, 0xf3, 0x27, 0xf8, 0xfe, 0x94, 0x44, 0xa0, 0x7f, 0xec, 0xb6, 0x35, 0xe4, 0x4a, 0xb8, 0xaf, 0x49, 0x87, 0x48, 0xfd, 0x6c, 0xdf, 0x77, 0x21, 0xbe, 0xfa, 0xfa, 0x3b, 0x3a, 0x3a, 0x40, 0x4c, 0x39, 0x06, 0xc6, 0x87, 0xcf, 0xc2, 0xff, 0xc0, 0x1e, 0xa2, 0x4e, 0x95, 0xc4, 0x45, 0xc1, 0xb1, 0x88, 0x2d, 0x78, 0x6d, 0xc6, 0xca, 0x4f, 0xf4, 0xff, 0x4e, 0xe3, 0x49, 0x8a, 0x07, 0x0d, 0x08, 0x11, 0xb4, 0xed, 0x19, 0xa3, 0xdb, 0xa8, 0x02, 0x4f, 0x3c, 0x1e, 0x39, 0xb0, 0x29, 0xc6, 0xa9, 0x24, 0xdc, 0x2d, 0x94, 0xf6, 0x08, 0x40, 0x29, 0xab, 0x9c, 0x48, 0xe9, 0x6f, 0x2b, 0x7e, 0xc1, 0xd8, 0x93, 0xde, 0x33, 0x51, 0x69, 0xcd, 0xf3, 0x91, 0xd9, 0x29, 0xa7, 0x96, 0x29, 0xdb, 0xc3, 0xcb, 0xa2, 0xa4, 0x40, 0x52, 0x83, 0x77, 0x5b, 0x48, 0xb5, 0xbf, 0xb7, 0xde, 0x78, 0x1e, 0xc3, 0xcb, 0xb6, 0x04, 0x97, 0xf6, 0x0f, 0x4b, 0x94, 0xc8, 0xc6, 0xa6, 0x6d, 0x6c, 0x09, 0x45, 0x72, 0x7e, 0x07, 0x1d, 0xc5, 0x77, 0xc8, 0x48, 0x21, 0xa2, 0xba, 0xad, 0xe0, 0x4d, 0xef, 0x4b, 0x4c, 0x55, 0x18, 0xed, 0x52, 0x32, 0x67, 0xea, 0x8d, 0x40, 0x2c, 0xab, 0x59, 0x96, 0x30, 0x49, 0x90, 0xb5, 0x19, 0xef, 0x86, 0xf9, 0x2e, 0x20, 0xa3, 0x4b, 0x8a, 0xfd, 0xe2, 0x9a, 0xfa, 0x99, 0x45, 0x84, 0x72, 0x7f, 0x50, 0x49, 0x85, 0xda, 0x08, 0x3d, 0x7f, 0x0d, 0xe6, 0x0d, 0x35, 0x31, 0xa2, 0x24, 0xda, 0x42, 0x2f, 0x69, 0x58, 0x8b, 0x4a, 0x61, 0xaf, 0xb2, 0x11, 0x4c, 0x36, 0x1a, 0x67, 0x38, 0xc5, 0xd0, 0xac, 0x0c };
            var randomS = new byte[] { 0xc9, 0x06, 0xbc, 0xd2, 0xe9, 0xdb, 0x8f, 0x5e, 0x47, 0x26, 0x91, 0xa0, 0xe4, 0xc9, 0xb3, 0x24, 0xf2, 0x9d, 0xfb, 0x2f, 0x33, 0xd7, 0x9c, 0x45, 0x1d, 0xc8, 0x68, 0xbf, 0x9a, 0xfa, 0xb6, 0x56, 0xa0, 0x1a, 0x84, 0xab, 0xdd, 0x53, 0xfc, 0x78, 0x46, 0x72, 0xdf, 0x3e, 0x49, 0x74, 0x76, 0x8c, 0xbf, 0xbf, 0x35, 0x2f, 0xe9, 0xd9, 0x91, 0x54, 0x0c, 0x5d, 0x80, 0x46, 0xb5, 0xee, 0x85, 0x6c, 0xee, 0xf8, 0x4a, 0x66, 0x1f, 0xac, 0xe2, 0x08, 0x14, 0xf6, 0x84, 0xdd, 0xe7, 0xb2, 0x86, 0x77, 0xdf, 0xd2, 0x53, 0x74, 0xb6, 0xd3, 0xce, 0xb7, 0x61, 0xdd, 0x23, 0x46, 0x4d, 0xf8, 0xfc, 0x0c, 0x9b, 0x02, 0xf3, 0x6f, 0x3f, 0x2f, 0x9a, 0x52, 0xaa, 0xc5, 0x67, 0x11, 0xbf, 0x89, 0x97, 0xf5, 0xb9, 0xc4, 0x5d, 0x25, 0x49, 0x68, 0x57, 0x80, 0x07, 0x3c, 0x21, 0x5a, 0x25, 0xaf, 0x23, 0xbc, 0x46, 0x8b, 0xc7, 0x97, 0xbe, 0xe5, 0xec, 0xfc, 0xd1, 0x9e, 0xde, 0x7d, 0x37, 0xce, 0x5f, 0x2e, 0x76, 0x9c, 0x81, 0x72, 0xfb, 0xe9, 0x01, 0x37, 0xde, 0x3a, 0xb5, 0xf1, 0x02, 0xc5, 0x6d, 0x19, 0xce, 0xdf, 0xda, 0xbb, 0xb1, 0xaa, 0x05, 0xcd, 0x80, 0x78, 0xc4, 0x1e, 0x72, 0x21, 0x72, 0x28, 0xe4, 0xce, 0xe1, 0x3b, 0x58, 0x66, 0x5b, 0x18, 0xaa, 0xe0, 0x12, 0x00, 0xfe, 0x11, 0xcf, 0x41, 0x8e, 0xc0, 0x89, 0xa2, 0x9d, 0x7c, 0x55, 0x78, 0x0b, 0x03, 0xb9, 0x63, 0x50, 0x2d, 0x44, 0x90, 0xd1, 0xf1, 0x36, 0xc9, 0x04, 0x8f, 0xcc, 0x1b, 0xc2, 0xef, 0x76, 0x3b, 0x11, 0x77, 0x59, 0xf4, 0x5b, 0xea, 0xdf, 0x56, 0xd4, 0x81, 0x8b, 0x36, 0xfd, 0x02, 0x06, 0xf1, 0x41, 0x4f, 0x47, 0xbc, 0x59, 0x57, 0x31, 0x9a, 0x1b, 0xfa, 0x8a, 0xf9, 0xd8, 0x3e, 0x0c, 0x28, 0x2c, 0xb1, 0xc2, 0x1d };

            var applicationKey = new byte[] { 0xef, 0x3f, 0xb4, 0x74, 0xe1, 0x41, 0x07, 0x76, 0xe5, 0xbf, 0x85, 0x94, 0xd2, 0x95, 0xb0, 0x5f, 0x3e, 0x04, 0xe2, 0x21, 0xce, 0x5a, 0x3e, 0xf3, 0xee, 0x40, 0xca, 0x33, 0x24, 0x78, 0xbb, 0x78 };
            var privateKeyC = new byte[] { 0x47, 0x3e, 0x33, 0x6b, 0xa2, 0xc7, 0xfb, 0xae, 0xc3, 0x9f, 0x38, 0xd6, 0x2e, 0x3e, 0x8d, 0xda, 0xc8, 0x8f, 0x09, 0x0f, 0xb6, 0xbe, 0x85, 0xd7, 0x3c, 0xc5, 0xf6, 0x11, 0x39, 0xa6, 0x3b, 0xb0 };
            var privateKeyS = new byte[] { 0x69, 0xb2, 0x36, 0x09, 0x02, 0x55, 0x3c, 0xf8, 0x65, 0x79, 0x79, 0xfb, 0xea, 0xc6, 0xcf, 0x80, 0x2d, 0x49, 0xd1, 0x30, 0x73, 0xd9, 0xa7, 0x11, 0x48, 0x4f, 0x42, 0x9f, 0x85, 0x12, 0x11, 0x40 };

            //var rng = new RandomNumberGenerator();
            //message1 = rng.Generate(16);
            //message2 = rng.Generate(32);
            //message3 = rng.Generate(256 - 16);
            //randomC = rng.Generate(256);
            //randomS = rng.Generate(256);
            //applicationKey = rng.Generate(32);
            //privateKeyC = KeyGeneration.GeneratePrivateKey();
            //privateKeyS = KeyGeneration.GeneratePrivateKey();

            //BytePrintHelper.PrintAsByteArray(nameof(message1), message1);
            //BytePrintHelper.PrintAsByteArray(nameof(message2), message2);
            //BytePrintHelper.PrintAsByteArray(nameof(message3), message3);
            //BytePrintHelper.PrintAsByteArray(nameof(randomC), randomC);
            //BytePrintHelper.PrintAsByteArray(nameof(randomS), randomS);
            //BytePrintHelper.PrintAsByteArray(nameof(applicationKey), applicationKey);
            //BytePrintHelper.PrintAsByteArray(nameof(privateKeyC), privateKeyC);
            //BytePrintHelper.PrintAsByteArray(nameof(privateKeyS), privateKeyS);

            var ec1 = new byte[] { 0xd4, 0xf7, 0xd4, 0x89, 0x86, 0xdc, 0x90, 0xc8, 0x62, 0x5b, 0xb7, 0x8d, 0xc5, 0x25, 0x51, 0xd4, 0xb1, 0x4b, 0xdd, 0x0d, 0x6f, 0xda, 0x36, 0x98, 0x3e, 0xb9, 0xd0, 0x1e, 0x90, 0x93, 0x7d, 0x7c, 0x3d, 0x96, 0x17, 0xe1, 0x9e, 0x13, 0xa8, 0xec, 0x29, 0x7f, 0xac, 0x75, 0xaf, 0xff, 0x65, 0xf7, 0x1a, 0xf8, 0xc3, 0x52, 0xa1, 0xb7, 0x6f, 0x8d, 0x37, 0x1b, 0xc5, 0xec, 0x53, 0x18, 0xfe, 0x42, 0x1e, 0x21, 0xf1, 0xf2, 0xbc, 0x36, 0x45, 0xee, 0xe4, 0x12, 0xb9, 0xb2, 0xac, 0x7e, 0x46, 0xd0, 0xe9, 0x7f, 0x43, 0xf3, 0xa9, 0xe8, 0xa5, 0xec, 0xf4, 0xcf, 0xa9, 0x27, 0x16, 0x72, 0x30, 0xd4, 0xb0, 0x42, 0x31, 0x71, 0xa5, 0xfc, 0xe6, 0x52, 0xe5, 0x56, 0x62, 0x26, 0x64, 0x3e, 0xe7, 0xa3, 0x39, 0x0a, 0x1f, 0x24, 0x2a, 0xac, 0xf8, 0xb5, 0x37, 0x2e, 0x1e, 0x90, 0x80, 0x36, 0x17, 0x2c, 0x71, 0x17, 0x31, 0xac, 0x25, 0x23, 0xdb, 0x2a, 0x2c, 0x42, 0x1e, 0x29, 0x34, 0x4c, 0x1b, 0x2d, 0xe9, 0x2c, 0x41, 0x81, 0xef, 0x95, 0x62, 0xeb, 0x95, 0xa0, 0x64, 0xf1 };
            var es2 = new byte[] { 0xc9, 0x06, 0xbc, 0xd2, 0xe9, 0xdb, 0x8f, 0x5e, 0x47, 0x26, 0x91, 0xa0, 0xe4, 0xc9, 0xb3, 0x24, 0x4a, 0xb3, 0x7d, 0xdc, 0x64, 0x3b, 0x1e, 0xb2, 0xa9, 0xc6, 0xcb, 0xba, 0x5c, 0x56, 0x26, 0x0e, 0x19, 0x39, 0x9f, 0x09, 0xa5, 0x36, 0xfc, 0x44, 0x76, 0xfc, 0x8d, 0xb6, 0x1d, 0xdd, 0x20, 0x2e, 0xd4, 0xf7, 0xd4, 0x89, 0x86, 0xdc, 0x90, 0xc8, 0x62, 0x5b, 0xb7, 0x8d, 0xc5, 0x25, 0x51, 0xd4, 0x6a, 0x42, 0x9b, 0x65, 0x66, 0xe3, 0x63, 0xe5, 0xe2, 0x9c, 0xe9, 0x36, 0xb3, 0xd6, 0xaf, 0xd0, 0xa6, 0x02, 0x38, 0x4e, 0xdf, 0x86, 0x7d, 0xf2, 0x8a, 0xfe, 0xf4, 0x5d, 0xe5, 0x87, 0xd9, 0x0e, 0x52, 0xd1, 0x12, 0x1b, 0xe5, 0x67, 0x5f, 0xec, 0xda, 0x61, 0x74, 0x70, 0x6d, 0x2c, 0x0e, 0x52, 0x87, 0x84, 0x9f, 0xcd, 0x25, 0x04, 0xc8, 0x6e, 0x87, 0xbf, 0x0a, 0x09, 0x2e, 0x31, 0x89, 0x12, 0xb8, 0x6d, 0x9e, 0x99, 0xee, 0xf5, 0x79, 0xb6, 0x98, 0xac, 0x4a, 0xe3, 0xb2, 0x12, 0xf4, 0xcb, 0xf0, 0xaa, 0xc8, 0x50, 0xf1, 0x40, 0xcb, 0x04, 0x73, 0xb6, 0x38, 0x5d, 0xbc, 0xcb, 0xbd, 0xff, 0xf9, 0xbb, 0xdc, 0x67, 0x78, 0xed, 0xd9, 0xbb, 0x52, 0x72, 0x3e, 0x1b, 0xe9, 0x20, 0x87, 0x79, 0x09, 0xfc, 0x29, 0xbf, 0x4e, 0x62, 0x9c, 0x13, 0x31, 0x21, 0xc9, 0x71, 0xd2, 0x66, 0x5e, 0x47, 0xca, 0xee, 0xa2, 0x5f, 0x4a, 0x95, 0xb3, 0x67, 0x36, 0x00, 0x73, 0x19, 0x4f, 0x86, 0xab, 0xf1, 0x3e, 0xd4, 0xce, 0x0c, 0x9a, 0xf3, 0x68, 0x03, 0x8a, 0x36, 0x79, 0x6e, 0xb6, 0x0a, 0x7d, 0x59, 0x64, 0xf1, 0xd0, 0x32, 0xa9, 0x40, 0x94, 0x93, 0x71, 0x5e, 0x36, 0x72 };
            var ec3 = new byte[] { 0xa0, 0xd7, 0xb7, 0xfa, 0x7e, 0x1b, 0xbc, 0xad, 0xce, 0x9b, 0x4b, 0xdd, 0xfc, 0x27, 0x3f, 0x06, 0x2e, 0xef, 0x91, 0xf3, 0x4e, 0x5b, 0xd9, 0xfd, 0x86, 0x81, 0x4f, 0x1f, 0xa9, 0x3f, 0x26, 0xd4, 0x0d, 0xdc, 0x48, 0x5c, 0x0b, 0xe8, 0xbf, 0x70, 0xa5, 0xe2, 0xc5, 0xa9, 0x62, 0xde, 0xf9, 0x0b, 0xbc, 0xe6, 0xcd, 0x9a, 0x47, 0x4c, 0x99, 0xa8, 0xe8, 0x11, 0x9c, 0x00, 0x0d, 0x80, 0x68, 0xdf };
            var es4 = new byte[] { 0x29, 0xa8, 0xbb, 0x57, 0x5f, 0xa5, 0x00, 0x07, 0x8a, 0x4a, 0x56, 0x47, 0x2b, 0xc5, 0x50, 0x3f, 0x3b, 0x7f, 0xe8, 0x5d, 0x6e, 0x7f, 0x8d, 0x5e, 0x98, 0x68, 0x90, 0x9a, 0x2c, 0x5b, 0xb9, 0x89 };
            var ec6 = new byte[] { 0x29, 0x3f, 0x3d, 0x0f, 0xf8, 0xad, 0x1f, 0xe2, 0x17, 0x69, 0x8f, 0x26, 0xf4, 0x40, 0xe0, 0x87, 0x25, 0xe1, 0xcc, 0x1b, 0x91, 0x89, 0x70, 0x88, 0x38, 0xbc, 0x49, 0x90, 0x2f, 0x68, 0x9f, 0xb2, 0xcc, 0x3b, 0x43, 0xd7, 0xea, 0x95, 0xf7, 0xd3, 0x53, 0x44, 0x41, 0x7b, 0x80, 0x0c, 0xe5, 0x2d, 0x8d, 0x97, 0x29, 0x40, 0xac, 0xd0, 0x5d, 0xbd, 0xea, 0xec, 0xaf, 0xa3, 0xcb, 0x7a, 0x77, 0x77 };
            var es7 = new byte[] { 0x3c, 0x07, 0x3f, 0x70, 0xe7, 0xee, 0x7f, 0x88, 0x34, 0x14, 0x8e, 0x1a, 0xb8, 0xb4, 0xd4, 0x33 };
            var es8 = new byte[] { 0x17, 0x57, 0x08, 0x06, 0xa3, 0x70, 0x18, 0xf2, 0xda, 0xaf, 0x2e, 0x87, 0x7d, 0xc8, 0xa5, 0x3e, 0xc2, 0xcb, 0x63, 0x40, 0xaa, 0x9a, 0xfb, 0xd7, 0x9a, 0x7b, 0xca, 0xe5, 0xfe, 0x3e, 0xed, 0x04, 0xaf, 0x56, 0x97, 0x2c, 0x9e, 0x3a, 0xea, 0xaa, 0x68, 0x9b, 0x4d, 0xd8, 0x9f, 0xe7, 0x25, 0x15, 0xb5, 0xf6, 0x69, 0x1a, 0xde, 0x61, 0xe2, 0x6e, 0xe9, 0x19, 0xd7, 0x4b, 0x05, 0x01, 0xaf, 0x3d, 0x0d, 0x2b, 0x35, 0x9a, 0xf3, 0x2c, 0xee, 0xeb, 0x0a, 0x68, 0x47, 0xe5, 0xd2, 0xf2, 0xee, 0x90 };
            var ec9 = new byte[] { 0x73, 0x17, 0xa6, 0x4a, 0x5c, 0xb5, 0x1c, 0x5f, 0xda, 0x61, 0x33, 0x4e, 0xde, 0x38, 0x54, 0x97, 0xc6, 0x95, 0x14, 0xc6, 0x4b, 0x60, 0xf8, 0xd5, 0x32, 0x37, 0x38, 0xc8, 0x01, 0x38, 0x28, 0x8b };
            var ec10 = new byte[] { 0xf7, 0x11, 0x86, 0xd0, 0x87, 0x67, 0xf2, 0xf1, 0x98, 0x75, 0xe4, 0x12, 0xd6, 0xff, 0x75, 0x4d, 0xfd, 0x23, 0x8a, 0xf8, 0x71, 0x00, 0x0f, 0xe1, 0x19, 0x74, 0x17, 0x0d, 0xc0, 0xf1, 0xb1, 0x75, 0x2b, 0x74, 0xf7, 0x5e, 0xd2, 0x58, 0x01, 0x2a, 0xa4, 0x39, 0x51, 0xe3, 0x6f, 0x5b, 0x24, 0x01, 0x19, 0x86, 0x9a, 0xf6, 0x8c, 0x37, 0x43, 0xb1, 0xfd, 0x0a, 0xc0, 0x37, 0xd0, 0x02, 0x0a, 0xc8, 0x1c, 0x74, 0x2b, 0x26, 0x17, 0xde, 0x34, 0x0a, 0x21, 0x8b, 0xda, 0x1f, 0xae, 0x19, 0x81, 0x14, 0x97, 0x60, 0x62, 0x38, 0x48, 0xb0, 0x99, 0x3e, 0x82, 0x19, 0xad, 0xdd, 0xb3, 0x4e, 0x63, 0x9f, 0x4f, 0x25, 0xe7, 0x43, 0xe7, 0x30, 0x1b, 0xde, 0x14, 0x8b, 0x55, 0xd7, 0xe9, 0x69, 0x75, 0x03, 0x36, 0xce, 0xd7, 0xab, 0x00, 0x4e, 0x1c, 0xaa, 0xfd, 0xd7, 0x35, 0x1f, 0x45, 0x79, 0x02, 0x7a, 0x86, 0x1c, 0x7b, 0x1e, 0xbc, 0x13, 0x1f, 0xa6, 0x1e, 0x10, 0x27, 0xcd, 0xb4, 0x20, 0x8d, 0xbd, 0x1e, 0xe1, 0x6b, 0xe2, 0xfb, 0xfd, 0xc5, 0x54, 0xf5, 0x70, 0x54, 0xb9, 0xe2, 0x53, 0xe0, 0x5a, 0x7b, 0xed, 0x0a, 0x7e, 0x24, 0xa8, 0x39, 0x42, 0x5b, 0xa3, 0x90, 0x81, 0x96, 0x15, 0x97, 0xd0, 0x0a, 0x5f, 0x4a, 0x33, 0xfb, 0x1b, 0x73, 0x29, 0x09, 0xa4, 0x8d, 0xb9, 0xcc, 0xf5, 0xcd, 0x5f, 0x0b, 0x41, 0xf2, 0xf7, 0xd1, 0xc9, 0xab, 0x9f, 0x4d, 0x63, 0x38, 0xaa, 0x68, 0x52, 0xcc, 0xe9, 0x3d, 0x72, 0x68, 0xcf, 0xa9, 0x96, 0x9b, 0xa8, 0x63, 0xb3, 0xa9, 0xb2, 0x44, 0x70, 0x92, 0x7d, 0x1c, 0x51, 0x30, 0xb0, 0x3a, 0xd2, 0x28, 0xb1, 0x02, 0x01, 0xf0, 0x0d, 0x28, 0x35, 0x5d, 0x44, 0x3a, 0x1d, 0xc9, 0xc4, 0xc5, 0x1a, 0x3d, 0xd4, 0xdf, 0xb6, 0x1b, 0xbb, 0xb8, 0x38, 0x95, 0xde };
            var es11 = new byte[] { 0x32, 0x12, 0x57, 0x18, 0x87, 0xa2, 0x26, 0x2a, 0x91, 0x3e, 0xf1, 0xa5, 0x07, 0x76, 0x0f, 0x6d, 0xa2, 0x09, 0x6a, 0x7b, 0xa4, 0x59, 0x5d, 0xc6, 0x2b, 0xca, 0x0e, 0xce, 0xd2, 0xf7, 0xb3, 0x4f, 0x01, 0x52, 0x1c, 0x07, 0x59, 0x06, 0x7b, 0x2a, 0x4c, 0x57, 0xeb, 0x45, 0x64, 0x37, 0x9c, 0xe5, 0x22, 0xcd, 0x77, 0x19, 0x29, 0xe3, 0x6e, 0x21, 0xbf, 0x11, 0x40, 0x6a, 0x89, 0xc8, 0x8f, 0xb0, 0x2b, 0x8e, 0x2a, 0x33, 0x2c, 0xce, 0x24, 0x9f, 0xed, 0xec, 0x3a, 0x50, 0xae, 0x69, 0xcd, 0x99, 0xac, 0x92, 0xd7, 0xaa, 0xe7, 0xca, 0xbf, 0x7b, 0xc4, 0x36, 0xd7, 0xd8, 0x16, 0xf4, 0x59, 0x30, 0xc4, 0x8c, 0x10, 0x66, 0x6a, 0xb6, 0xf2, 0x18, 0x69, 0x8c, 0xae, 0x38, 0x32, 0x54, 0x12, 0xcb, 0x5c, 0xc7, 0x92, 0x3b, 0x3a, 0x71, 0xa4, 0xfd, 0x81, 0x46, 0xf6, 0x7d, 0xf9, 0x97, 0xeb, 0xf2, 0x5c, 0xfc, 0x4f, 0x3c, 0x9c, 0x6f, 0xd8, 0x42, 0x24, 0x11, 0x16, 0xbd, 0xaa, 0x38, 0x0f, 0x0e, 0xe2, 0x92, 0x83, 0x54, 0x0f, 0xd3, 0x6e, 0xe5, 0x2a, 0x36, 0x77, 0x14, 0x80, 0x5e, 0xf9, 0x1f, 0x5b, 0xd0, 0xb5, 0xb5, 0x57, 0x5b, 0xf1, 0x79, 0xf8, 0x30, 0x74, 0xb6, 0xbf, 0xcb, 0x4c, 0x66, 0x32, 0xeb, 0x3a, 0xed, 0x80, 0x5b, 0xd6, 0xd8, 0x57, 0xf8, 0xec, 0xf8, 0x53, 0x05, 0x9a, 0xcc, 0x7b, 0x73, 0x9a, 0xfc, 0xe3, 0x40, 0xef, 0xbb, 0x96, 0x7a, 0x98, 0x9d, 0x73, 0x1b, 0x88, 0x40, 0xbd, 0x94, 0xfc, 0x21, 0x0b, 0x0c, 0xba, 0xf6, 0xc8, 0x53, 0x3a, 0xdf, 0x1a, 0x87, 0xdc, 0xfe, 0x15, 0xa7, 0xbc, 0x0e, 0x3b, 0x3a, 0x67, 0x3b, 0x40, 0xfd, 0xab, 0xa8, 0x75, 0xa0, 0xbf, 0x6a };


            var configC = new MicroRatchetConfiguration
            {
                IsClient = true,
                MaximumMessageSize = 256,
                MinimumMessageSize = 32,
                ApplicationKey = applicationKey
            };
            var configS = new MicroRatchetConfiguration
            {
                IsClient = false,
                MaximumMessageSize = 256,
                MinimumMessageSize = 32,
                ApplicationKey = applicationKey
            };

            var rngC = new FakeRandomNumberGenerator(randomC);
            var storageC = new InMemoryStorage();
            var signatureC = new Signature(privateKeyC, new SecureRandom(rngC));
            var rngS = new FakeRandomNumberGenerator(randomS);
            var storageS = new InMemoryStorage();
            var signatureS = new Signature(privateKeyS, new SecureRandom(rngS));

            var servicesC = new BouncyCastleServices(privateKeyC, storageC)
            {
                Signature = signatureC,
                RandomNumberGenerator = rngC,
            };
            servicesC.KeyAgreementFactory = new DeterministicKexFac(servicesC.KeyAgreementFactory, rngC);

            var servicesS = new BouncyCastleServices(privateKeyS, storageS)
            {
                Signature = signatureS,
                RandomNumberGenerator = rngS,
            };
            servicesS.KeyAgreementFactory = new DeterministicKexFac(servicesS.KeyAgreementFactory, rngS);

            var C = new MicroRatchetClient(servicesC, configC);
            var S = new MicroRatchetClient(servicesS, configS);

            var c1 = C.InitiateInitialization();
            var s2 = S.Receive(c1).ToSendBack;
            var c3 = C.Receive(s2).ToSendBack;
            var s4 = S.Receive(c3).ToSendBack;
            var c5 = C.Receive(s4).ToSendBack;

            //BytePrintHelper.PrintAsByteArray("ec1", c1);
            //BytePrintHelper.PrintAsByteArray("es2", s2);
            //BytePrintHelper.PrintAsByteArray("ec3", c3);
            //BytePrintHelper.PrintAsByteArray("es4", s4);

            Assert.Equal(ec1, c1);
            Assert.Equal(es2, s2);
            Assert.Equal(ec3, c3);
            Assert.Equal(es4, s4);
            Assert.Null(c5);

            var c6 = C.Send(message1);
            var s7 = S.Receive(c6).Payload;
            var s8 = S.Send(message2);
            var c9 = C.Receive(s8).Payload;
            var c10 = C.Send(message3);
            var s11 = S.Receive(c10).Payload;

            //BytePrintHelper.PrintAsByteArray("ec6", c6);
            //BytePrintHelper.PrintAsByteArray("es7", s7);
            //BytePrintHelper.PrintAsByteArray("es8", s8);
            //BytePrintHelper.PrintAsByteArray("ec9", c9);
            //BytePrintHelper.PrintAsByteArray("ec10", c10);
            //BytePrintHelper.PrintAsByteArray("es11", s11);

            Assert.Equal(ec6, c6);
            Assert.Equal(es7, s7);
            Assert.Equal(es8, s8);
            Assert.Equal(ec9, c9);
            Assert.Equal(ec10, c10);
            Assert.Equal(es11, s11);

            Assert.Equal(message1, s7);
            Assert.Equal(message2, c9);
            Assert.Equal(message3, s11);
        }



        [Fact]
        public void ReferenceTest2()
        {
            var message1 = new byte[] { 0x47, 0xa4, 0x1a, 0xb3, 0x42, 0x0a, 0x2f, 0xee, 0xb8, 0xa0, 0xc6, 0x4e, 0x1d, 0x3f, 0x31, 0x65, 0x54, 0x13, 0x53, 0x02, 0x64, 0xb5, 0x08, 0x1a, 0xbe, 0xa7, 0x19, 0x09, 0x00, 0x07, 0xb6, 0x4f };
            var message2 = new byte[] { 0xed, 0x81, 0x83, 0x7c, 0xe2, 0x9a, 0x96, 0xde, 0x84, 0x14, 0xd7, 0x2a, 0x22, 0x24, 0x6d, 0x98, 0xc3, 0x3f, 0x82, 0x6e, 0xae, 0xff, 0xea, 0x0c, 0x73, 0x93, 0x85, 0x67, 0x3d, 0x32, 0x72, 0x64 };
            var message3 = new byte[] { 0x23, 0x2b, 0xa0, 0xe6, 0xca, 0x28, 0x0d, 0x02, 0xcb, 0x8b, 0x15, 0x66, 0xe7, 0x5f, 0x5c, 0x93, 0xce, 0x00, 0xb2, 0x48, 0xbe, 0x14, 0xa3, 0xc6, 0x54, 0xdf, 0xb7, 0xdd, 0xa0, 0x8b, 0x70, 0x2c };
            
            var randomC = new byte[] { 0x91, 0x97, 0x0f, 0x9c, 0xb0, 0x18, 0x07, 0xb6, 0x45, 0x78, 0x0d, 0xbb, 0xed, 0x81, 0x67, 0xfa, 0x74, 0x23, 0x6a, 0x31, 0x8f, 0x8f, 0xe2, 0x63, 0xd0, 0x2d, 0xa7, 0x06, 0x09, 0xc7, 0x9a, 0x69, 0x48, 0xe7, 0xb3, 0x51, 0xef, 0x18, 0x2e, 0x60, 0xdd, 0xaa, 0x05, 0xf4, 0x4b, 0xb4, 0xa1, 0x67, 0x8a, 0x36, 0x82, 0xca, 0x2c, 0xdf, 0x0d, 0x76, 0xe8, 0x79, 0x6f, 0xbf, 0x51, 0x48, 0x29, 0x06, 0xae, 0xac, 0x52, 0xb2, 0xc6, 0xda, 0xf6, 0x32, 0x4e, 0x84, 0x26, 0x86, 0x1e, 0x67, 0xa8, 0x0f, 0xe5, 0x1a, 0x06, 0xf5, 0xd9, 0x3e, 0x96, 0xaf, 0x0b, 0x82, 0xf0, 0xb0, 0xe9, 0xd8, 0xae, 0x31, 0x07, 0x1f, 0x6e, 0x15, 0x38, 0x03, 0xf4, 0x37, 0xcd, 0x21, 0xc8, 0x8a, 0xf2, 0x32, 0xf2, 0x8a, 0x42, 0x6b, 0xa3, 0x39, 0xd4, 0x22, 0xaa, 0x48, 0x16, 0xd2, 0xb3, 0x02, 0xf1, 0xe3, 0x9b, 0xd7, 0x81, 0x37, 0xfb, 0x44, 0xbc, 0xe0, 0x60, 0x45, 0x69, 0xb0, 0x68, 0x86, 0x1e, 0x6d, 0x1c, 0xaf, 0x77, 0xba, 0x10, 0xf0, 0x07, 0x26, 0x24, 0x17, 0x17, 0xe6, 0xb2, 0xc5, 0xcf, 0xb5, 0xb9, 0xae, 0x0d, 0x50, 0x0a, 0x0b, 0x15, 0x05, 0x22, 0x26, 0xcb, 0x87, 0xfe, 0xc9, 0xdc, 0xb8, 0x27, 0x02, 0x2d, 0xdb, 0x48, 0x1b, 0x3a, 0xc2, 0xfd, 0xac, 0x58, 0xca, 0x07, 0x3a, 0x37, 0x5f, 0xb7, 0xf8, 0x25, 0xda, 0xd9, 0xc0, 0xfd, 0xbc, 0x36, 0x81, 0x04, 0x13, 0xe6, 0x41, 0xb8, 0xf8, 0xf6, 0x30, 0x84, 0xa4, 0xe6, 0xf3, 0x5b, 0x08, 0x2d, 0xfa, 0xa9, 0x18, 0x0b, 0x00, 0xa9, 0x1c, 0xe3, 0x9f, 0x72, 0x3f, 0x7e, 0x2c, 0x87, 0x1e, 0x50, 0x0f, 0xa3, 0x54, 0xc8, 0x98, 0xba, 0xdf, 0x62, 0x33, 0x79, 0x76, 0x16, 0x08, 0x79, 0xcf, 0xed, 0xf4, 0x22, 0x18, 0xb8, 0xca, 0xb7, 0x51, 0x96, 0xe3 };
            var randomS = new byte[] { 0x9d, 0x08, 0xb8, 0x7a, 0x50, 0x02, 0x3f, 0x66, 0xcf, 0xb2, 0x37, 0x52, 0xbc, 0x11, 0xb2, 0xd8, 0xb3, 0x13, 0xb8, 0x5f, 0xc6, 0xe0, 0x63, 0xb2, 0xe0, 0x68, 0xc6, 0xbf, 0x02, 0x54, 0x7d, 0xa2, 0x0e, 0x9d, 0xc0, 0xa8, 0x56, 0xbf, 0x5b, 0xf6, 0x33, 0x6d, 0xcd, 0x10, 0x25, 0x12, 0x06, 0xbb, 0xa9, 0x8d, 0xb0, 0x11, 0xa1, 0x04, 0xce, 0xd1, 0x2d, 0x88, 0x8b, 0xf2, 0x4c, 0x01, 0xf9, 0xef, 0x85, 0x9d, 0x5b, 0xde, 0xdf, 0x25, 0xa8, 0xee, 0xc6, 0x0c, 0xd9, 0x6f, 0x46, 0x8b, 0xab, 0xc2, 0xb2, 0x56, 0xee, 0x87, 0xbf, 0xbc, 0xe4, 0xc6, 0xea, 0xf1, 0x81, 0xef, 0x3a, 0xc2, 0x55, 0xc4, 0x38, 0xce, 0xb8, 0xe8, 0xaf, 0x5b, 0xc1, 0x53, 0x22, 0xaf, 0x07, 0x4b, 0xa4, 0x44, 0x3c, 0xcd, 0x41, 0x46, 0x61, 0xc5, 0xa5, 0x72, 0x16, 0x6c, 0xed, 0x3b, 0x12, 0x35, 0x9f, 0xf5, 0x0d, 0x3f, 0xe1, 0xec, 0xdc, 0x30, 0x6b, 0xb5, 0xbf, 0x86, 0x6a, 0x37, 0xb3, 0x5c, 0x89, 0xff, 0x5e, 0xd1, 0x96, 0x96, 0x4b, 0xe7, 0x6f, 0x2c, 0x5a, 0x85, 0xf7, 0xec, 0x40, 0xab, 0xc3, 0xcb, 0x5a, 0x3b, 0xc3, 0xc2, 0x9c, 0xbd, 0x10, 0x00, 0x4e, 0xbf, 0x3f, 0xd4, 0xb3, 0x62, 0x4f, 0x21, 0xae, 0x94, 0xc0, 0xa1, 0x94, 0x9a, 0x0b, 0xff, 0xb8, 0x00, 0x0a, 0xc3, 0xaf, 0x60, 0x1d, 0x2e, 0x8a, 0x98, 0x71, 0xa7, 0x3c, 0xfb, 0x57, 0x6e, 0x5a, 0x14, 0x2b, 0x9c, 0xf0, 0x54, 0x25, 0x5a, 0x5c, 0x19, 0x67, 0xa1, 0x40, 0x98, 0xf3, 0xc6, 0xc6, 0xc8, 0x40, 0x56, 0x64, 0x69, 0x80, 0x35, 0xe7, 0xd9, 0x64, 0x52, 0x58, 0xa3, 0xbf, 0x45, 0xe2, 0x10, 0x07, 0x08, 0x26, 0x03, 0x04, 0xa5, 0x29, 0x0a, 0x9f, 0x04, 0x3a, 0x3d, 0x31, 0x31, 0x58, 0xc3, 0x67, 0x52, 0x51, 0x1e, 0x5f, 0x43, 0x93, 0xc0 };
            
            var applicationKey = new byte[] { 0x3f, 0x9e, 0x38, 0xdd, 0x4d, 0xf6, 0x2a, 0x73, 0xf3, 0xfa, 0x01, 0x89, 0xd5, 0x56, 0xfa, 0xe5, 0xa9, 0x89, 0x69, 0x6f, 0x8d, 0xef, 0xff, 0xf5, 0xa3, 0xed, 0xc5, 0x09, 0xeb, 0xd4, 0xb2, 0x16 };
            var privateKeyC = new byte[] { 0x76, 0x15, 0xea, 0x53, 0x39, 0xd1, 0x42, 0x11, 0x80, 0xc1, 0x4f, 0xdb, 0x1a, 0xdd, 0xc2, 0x3a, 0x95, 0xf8, 0x94, 0x8f, 0x00, 0xd6, 0xab, 0x80, 0xd3, 0x96, 0x9b, 0x2c, 0xd9, 0x64, 0xb4, 0x66 };
            var privateKeyS = new byte[] { 0x0d, 0xad, 0x79, 0xaf, 0xfb, 0x14, 0xbd, 0xaf, 0x99, 0xe2, 0x2d, 0xc7, 0x25, 0x5e, 0x0a, 0x0e, 0xff, 0x27, 0x00, 0x82, 0x7e, 0x75, 0x92, 0xbe, 0x7a, 0x84, 0xf9, 0xbc, 0x55, 0xc9, 0xd3, 0x8d };

            //var rng = new RandomNumberGenerator();
            //message1 = rng.Generate(32);
            //message2 = rng.Generate(32);
            //message3 = rng.Generate(32);
            //randomC = rng.Generate(256);
            //randomS = rng.Generate(256);
            //applicationKey = rng.Generate(32);
            //privateKeyC = KeyGeneration.GeneratePrivateKey();
            //privateKeyS = KeyGeneration.GeneratePrivateKey();

            //BytePrintHelper.PrintAsByteArray(nameof(message1), message1);
            //BytePrintHelper.PrintAsByteArray(nameof(message2), message2);
            //BytePrintHelper.PrintAsByteArray(nameof(message3), message3);
            //BytePrintHelper.PrintAsByteArray(nameof(randomC), randomC);
            //BytePrintHelper.PrintAsByteArray(nameof(randomS), randomS);
            //BytePrintHelper.PrintAsByteArray(nameof(applicationKey), applicationKey);
            //BytePrintHelper.PrintAsByteArray(nameof(privateKeyC), privateKeyC);
            //BytePrintHelper.PrintAsByteArray(nameof(privateKeyS), privateKeyS);

            var ec1 = new byte[] { 0x91, 0x97, 0x0f, 0x9c, 0xb0, 0x18, 0x07, 0xb6, 0x45, 0x78, 0x0d, 0xbb, 0xed, 0x81, 0x67, 0xfa, 0xf9, 0x7b, 0xe5, 0x95, 0x84, 0x54, 0x46, 0x5a, 0xb3, 0xd9, 0xd2, 0x9d, 0x0a, 0x5d, 0xf3, 0xc6, 0xb4, 0x14, 0xd6, 0x84, 0x71, 0xa1, 0x57, 0x5e, 0xd1, 0xeb, 0x63, 0x22, 0xb7, 0xd4, 0xba, 0x62, 0x0a, 0x05, 0x53, 0x6a, 0x5b, 0x10, 0x70, 0xab, 0x9f, 0x24, 0xb0, 0x43, 0x08, 0x38, 0x93, 0xe1, 0x68, 0xc0, 0x12, 0x60, 0x5e, 0x29, 0x71, 0xc4, 0x67, 0x46, 0x8c, 0x03, 0x1a, 0x61, 0x90, 0xc3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x57, 0x22, 0x0f, 0x9f, 0x96, 0x78, 0x9e, 0x13, 0x80, 0xad, 0x04, 0x93, 0x54, 0xdd, 0x91, 0x2f, 0x03, 0x1c, 0x45, 0xe9, 0xc2, 0xef, 0x21, 0x60, 0x14, 0x37, 0xea, 0x9b, 0x13, 0x81, 0x49, 0x8c, 0x15, 0xce, 0x09, 0xb2, 0x09, 0x12, 0xe8, 0xba, 0xd2, 0x99, 0x91, 0x4c, 0xa7, 0xd6, 0xf2, 0x2d, 0x4c, 0x0e, 0xda, 0x1a, 0x13, 0x73, 0x80, 0x13, 0x04, 0x8c, 0x8a, 0x36, 0x71, 0xea, 0x91, 0x17, 0xbf, 0x1a, 0xb9, 0x6b, 0xe6, 0x9d, 0xf8, 0x85, 0x09, 0x2a, 0xc1 };
            var es2 = new byte[] { 0x9d, 0x08, 0xb8, 0x7a, 0x50, 0x02, 0x3f, 0x66, 0xcf, 0xb2, 0x37, 0x52, 0xbc, 0x11, 0xb2, 0xd8, 0x96, 0xa1, 0x3b, 0xb3, 0x33, 0xff, 0xb6, 0xb9, 0xbe, 0x8f, 0x86, 0x1a, 0x03, 0x55, 0x84, 0xcd, 0x3f, 0x70, 0xdd, 0x08, 0x3a, 0x38, 0xe9, 0x6d, 0xd1, 0x44, 0x15, 0x71, 0x6c, 0x06, 0x76, 0xd3, 0x91, 0x97, 0x0f, 0x9c, 0xb0, 0x18, 0x07, 0xb6, 0x45, 0x78, 0x0d, 0xbb, 0xed, 0x81, 0x67, 0xfa, 0xe8, 0xda, 0x4d, 0x56, 0x04, 0x05, 0xa9, 0xc0, 0x53, 0x47, 0xa4, 0x3e, 0xc5, 0xf2, 0x51, 0xd5, 0x07, 0x62, 0xf7, 0x8c, 0xfb, 0xa0, 0xba, 0x04, 0xa6, 0xa7, 0xf3, 0x27, 0x9f, 0xd8, 0x55, 0x8d, 0xdc, 0x80, 0xac, 0x8b, 0x68, 0xea, 0x54, 0xda, 0x74, 0xc0, 0x6a, 0x88, 0x14, 0x4b, 0x2f, 0x9e, 0x8d, 0x6a, 0x2b, 0x70, 0xfe, 0x67, 0x40, 0x9a, 0x0c, 0xf2, 0x6a, 0xe5, 0xc1, 0x6e, 0x1f, 0xb5, 0x4b, 0xbc, 0x9b, 0x8b, 0x9e, 0x36, 0xc3, 0x59, 0x62, 0xc7, 0x14, 0x0c, 0xaa, 0x40, 0x94, 0xac, 0x66, 0xbf, 0xfb, 0xa4, 0x9f, 0xc4, 0x53, 0x34, 0x5c, 0x8d, 0x35, 0x3e, 0xbc, 0x40, 0x07, 0xde, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbc, 0x2f, 0x22, 0x53, 0x57, 0xd9, 0x9c, 0x8e, 0xe3, 0xdd, 0x13, 0x19, 0x62, 0x6c, 0xf4, 0xab, 0xc8, 0x37, 0x4d, 0xd5, 0x42, 0xff, 0x87, 0x90, 0xba, 0x8e, 0xca, 0x08, 0x2d, 0xac, 0xe1, 0x9e, 0x71, 0xb2, 0x13, 0x47, 0xdf, 0xb4, 0x32, 0x3a, 0x16, 0x5e, 0xea, 0x75, 0x9d, 0xdb, 0xed, 0x47, 0x3f, 0x4c, 0xa3, 0x15, 0x8e, 0x8b, 0x29, 0x76, 0x93, 0xcc, 0x8a, 0x6b, 0xe8, 0xe1, 0x00, 0x05, 0xe4, 0x97, 0x47, 0xef, 0xaa, 0x69, 0xd0, 0x2a, 0x93, 0x74, 0xa4, 0x72 };
            var ec3 = new byte[] { 0x3d, 0x8c, 0x45, 0xe8, 0xb1, 0xed, 0x2f, 0x0e, 0xcb, 0x01, 0xed, 0xc2, 0x02, 0xf1, 0x97, 0x9d, 0xf7, 0x84, 0x52, 0x5d, 0xfa, 0xb6, 0x62, 0x3b, 0x03, 0x95, 0xfb, 0xa7, 0x03, 0xac, 0xb6, 0x6a, 0xf6, 0xa5, 0x85, 0xa4, 0x60, 0x71, 0x02, 0xa6, 0xf9, 0x17, 0xc1, 0x8f, 0xd0, 0x0f, 0x15, 0xb6, 0xe8, 0xfd, 0xd7, 0xeb, 0x00, 0xb5, 0x97, 0x5a, 0xe9, 0x5f, 0xd2, 0xb8, 0x98, 0x19, 0xdd, 0xdc, 0xe8, 0xfd, 0xcc, 0x34, 0x53, 0xa6, 0xb6, 0xff, 0xd7, 0xe5, 0x2b, 0x01, 0x22, 0x00, 0xdb, 0x4f, 0xa5, 0x91, 0x2f, 0x50, 0xca, 0xaf, 0xae, 0x00, 0x95, 0x0d, 0x1d, 0x49, 0xce, 0xb8, 0x9d, 0x48, 0x5a, 0x54, 0xdb, 0x0f, 0xf8, 0xd2, 0x65, 0x43, 0xbd, 0x02, 0x80, 0x99, 0xa2, 0x35, 0xca, 0xaf, 0xd0, 0x86, 0xd2, 0xe8, 0x59, 0x1c, 0x80, 0xc7, 0x74, 0x1d, 0x35, 0x50, 0x66, 0x0f, 0xff, 0x86, 0x14, 0xaa, 0x56, 0xd5, 0xab, 0x14, 0x55, 0x14, 0x0f, 0xce, 0x08, 0x55, 0x9f, 0x22, 0x2e, 0x82, 0xaf, 0x36, 0xd2, 0x7a, 0x03, 0xcf, 0x42, 0x7f, 0x3a, 0x1a, 0x6a, 0x69, 0x61, 0x18, 0x47, 0xa6, 0xe1, 0xc0, 0x78, 0x90, 0x01, 0x9a, 0x65, 0x22, 0x46, 0xee, 0x2d, 0x59, 0xc3, 0x52, 0x06, 0x28, 0xb7, 0x42, 0x93, 0xf7, 0x39, 0x2c, 0x71, 0x5d, 0xe2, 0xbc, 0x98, 0x56, 0x97, 0xdb, 0x92, 0x67, 0x96, 0x8e, 0xae, 0xc0, 0x0e, 0x44, 0x79, 0x03, 0x91, 0xd5, 0x87, 0x05, 0x61, 0x3e, 0xf9, 0x10, 0x53, 0xf2, 0xa3, 0xa0, 0xb3, 0xc0, 0xae, 0xbf, 0x9c, 0xe4, 0x43, 0x71, 0x25, 0x55, 0x40, 0xe2, 0x88, 0xdf, 0xb2, 0xdf, 0x0d, 0xd3, 0x9e, 0x81, 0x99, 0xa3, 0x0c, 0xb4, 0xf1, 0xf6, 0xa0, 0x3b, 0x33, 0x5c, 0xb6, 0xe5, 0xeb, 0x78, 0xc5, 0xfb, 0x1a, 0x7d, 0x81, 0xc4, 0xb9, 0x70, 0x20, 0xe7 };
            var es4 = new byte[] { 0x95, 0xbf, 0x99, 0x5a, 0xd6, 0xa2, 0x6c, 0xa3, 0xfb, 0xeb, 0x57, 0x7e, 0xef, 0x3c, 0x8f, 0xd0, 0x52, 0x78, 0x4c, 0xd6, 0x47, 0x33, 0x08, 0x8e, 0x26, 0x6b, 0x7d, 0x63, 0x0b, 0x7c, 0x41, 0x14, 0xe1, 0x33, 0x78, 0x9c, 0x52, 0x89, 0x77, 0xcb, 0xc5, 0x47, 0xdc, 0x8d, 0x79, 0x1d, 0xa1, 0x1c, 0x80, 0x37, 0xa4, 0x1c, 0x05, 0x39, 0xa2, 0x9b, 0x5d, 0xce, 0x80, 0xe7, 0xba, 0x2d, 0xad, 0xb3, 0xa1, 0x91, 0xb9, 0xe4, 0xba, 0x85, 0x08, 0xf7, 0x92, 0x07, 0x9a, 0x24, 0x51, 0x42, 0x13, 0xb1, 0x16, 0xe9, 0x68, 0x33, 0xb1, 0xf0, 0x57, 0xfb, 0x7e, 0xe7, 0xe7, 0xf5, 0xe9, 0xa4, 0x88, 0x05, 0xa3, 0x9c, 0x43, 0xdd, 0xa0, 0xe7, 0x88, 0x48, 0x63, 0xae, 0xb8, 0xd3, 0xb5, 0xee, 0x87, 0x01, 0x6c, 0x05, 0xac, 0xc7, 0x70, 0x09, 0x16, 0x8d, 0x36, 0x70, 0x0d, 0xa2, 0x4b, 0x68, 0x7c, 0xea, 0x5b, 0x89, 0xaf, 0x9a, 0x59, 0xae, 0xcd, 0x84, 0x2a, 0x6c, 0x52, 0x0d, 0xc7, 0xa5, 0xc4, 0x5f, 0x8b, 0x27, 0x37, 0x78, 0x2d, 0xc9, 0xf4, 0x1e, 0x35, 0x63, 0x70, 0xcb, 0x54, 0x61, 0xec, 0xbb, 0x88, 0x14, 0x50, 0x5b, 0x61, 0x23, 0xc3, 0x14, 0xac, 0x30, 0xe4, 0x54, 0xc3, 0xbc, 0x07, 0x64, 0xfc, 0xf9, 0xcf, 0xab, 0xbb, 0x45, 0xe0, 0x81, 0x96, 0x73, 0x2e, 0x19, 0x87, 0xd6, 0x43, 0x3b, 0x8e, 0x19, 0xa7, 0x7d, 0xf2, 0x47, 0x92, 0xfa, 0x68, 0xa7, 0x15, 0x33, 0x9a, 0x57, 0x93, 0x57, 0xc8, 0x10, 0x40, 0xb2, 0x45, 0x50, 0x7b, 0x0d, 0x37, 0x6d, 0xe1, 0xcb, 0xea, 0xaa, 0x27, 0x8a, 0xd9, 0xff, 0x51, 0x87, 0x83, 0xa7, 0x5f, 0xa6, 0x41, 0xd1, 0x63, 0xe0, 0x84, 0x38, 0x18, 0xfa, 0x03, 0xff, 0xa5, 0x71, 0x21, 0x31, 0x34, 0xdf, 0x20, 0x18, 0xea, 0x5f, 0x2f, 0xff, 0x0d, 0x9a };
            var ec6 = new byte[] { 0x95, 0x41, 0x8d, 0x9e, 0x98, 0x19, 0x9d, 0xac, 0xa1, 0x42, 0x44, 0x5b, 0xa4, 0x31, 0x9f, 0x99, 0xde, 0xa1, 0x8b, 0x13, 0xde, 0xa9, 0xa5, 0xd9, 0x59, 0xb8, 0xe2, 0x45, 0xbd, 0x7a, 0x04, 0x39, 0x38, 0x83, 0x23, 0x23, 0xf1, 0x33, 0x7c, 0x18, 0x4a, 0x4b, 0x8c, 0xe3, 0x07, 0x2e, 0x3d, 0xfa, 0x0f, 0xac, 0xce, 0x2d, 0x75, 0x95, 0xd7, 0x66, 0xa1, 0x8a, 0x22, 0x7b, 0x44, 0x58, 0x2a, 0xdd, 0x63, 0x76, 0x03, 0xf4, 0x14, 0xde, 0x35, 0x03, 0x49, 0xfd, 0x2e, 0xb7, 0xd0, 0x56, 0x61, 0xd9, 0x3c, 0xc8, 0x8c, 0xa9, 0xd6, 0x57, 0x54, 0xbe, 0x78, 0x81, 0xc0, 0x4b, 0x38, 0x5c, 0xcf, 0x49, 0x37, 0x77, 0x47, 0xc7, 0x2f, 0x9c, 0x40, 0xd4, 0xc8, 0x1f, 0xbf, 0x5e, 0x56, 0x2f, 0x19, 0xcb, 0x33, 0x14, 0x12, 0x80, 0xf1, 0x20, 0xd8, 0xe9, 0xc5, 0x3f, 0x36, 0xb1, 0xd6, 0x4f, 0x77, 0xec, 0x28, 0x86, 0xb1, 0xdb, 0xd9, 0xfd, 0x64, 0xe5, 0xad, 0x3f, 0xc0, 0x68, 0xbd, 0x7d, 0x3b, 0x59, 0xc3, 0x5b, 0xc4, 0x5e, 0x09, 0x42, 0xff, 0xf1, 0x8e, 0xd3, 0x84, 0xf5, 0xd1, 0x6c, 0x75, 0x71, 0xfc, 0xb2, 0x08, 0x6b, 0xb7, 0x16, 0x36, 0x30, 0xd7, 0x49, 0x73, 0x52, 0x3b, 0xa6, 0xa4, 0x03, 0x82, 0x03, 0x48, 0x58, 0x38, 0xe5, 0xf3, 0x0a, 0xd7, 0x16, 0xb9, 0xcc, 0x79, 0x75, 0xfe, 0x9c, 0x4c, 0xa3, 0xa6, 0x24, 0x1c, 0xd3, 0x74, 0x04, 0xd8, 0x65, 0xb7, 0xad, 0x3d, 0x23, 0x64, 0x20, 0x08, 0xf4, 0x26, 0x02, 0x7a, 0xce, 0xdf, 0xc1, 0xd7, 0xe0, 0xa9, 0x6e, 0x90, 0x83, 0x0f, 0xa7, 0xf7, 0x83, 0xf9, 0xa0, 0x97, 0xc9, 0xb2, 0xb9, 0x7b, 0x8a, 0xa1, 0x2e, 0x81, 0x2c, 0xb8, 0x2e, 0x91, 0xa3, 0x8b, 0x6e, 0xaf, 0x8c, 0xf1, 0x90, 0x73, 0xc4, 0x3d, 0xc1, 0xaa, 0x19, 0xe7, 0x9a };
            var es7 = new byte[] { 0x47, 0xa4, 0x1a, 0xb3, 0x42, 0x0a, 0x2f, 0xee, 0xb8, 0xa0, 0xc6, 0x4e, 0x1d, 0x3f, 0x31, 0x65, 0x54, 0x13, 0x53, 0x02, 0x64, 0xb5, 0x08, 0x1a, 0xbe, 0xa7, 0x19, 0x09, 0x00, 0x07, 0xb6, 0x4f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
            var es8 = new byte[] { 0xb6, 0x52, 0xca, 0x59, 0x80, 0x61, 0xbd, 0xea, 0xc3, 0xc5, 0xec, 0x84, 0x23, 0xd9, 0x1a, 0xc4, 0xf1, 0xad, 0x37, 0x99, 0xd7, 0xbd, 0xba, 0x1f, 0x07, 0x0e, 0x5e, 0x01, 0x23, 0x2d, 0xc2, 0x21, 0x4d, 0xed, 0xdb, 0x87, 0xc9, 0x81, 0x0a, 0x42, 0x07, 0x4d, 0x6d, 0x94, 0xa2, 0xdf, 0xe2, 0x0c, 0xba, 0x24, 0x2c, 0xcd, 0xd5, 0x72, 0xaa, 0x54, 0xeb, 0xb8, 0xae, 0x90, 0x40, 0xfd, 0xcc, 0x4e, 0xc9, 0x6a, 0x88, 0x9c, 0xdf, 0xa5, 0x09, 0xa8, 0x3a, 0x74, 0x74, 0x14, 0x27, 0xa9, 0x4b, 0x16, 0xb9, 0x88, 0x5b, 0xa7, 0x23, 0x55, 0xb6, 0x25, 0x9b, 0x42, 0x32, 0x22, 0xae, 0x7b, 0x8a, 0x83, 0x51, 0x05, 0x0b, 0x9f, 0xa3, 0xfa, 0xfb, 0x27, 0xd1, 0xb5, 0x33, 0xe0, 0x84, 0x0e, 0xf3, 0xb8, 0xe1, 0x34, 0x8f, 0x36, 0x95, 0x11, 0xa2, 0xe6, 0x84, 0x49, 0xad, 0x01, 0xe4, 0xf0, 0xc6, 0x6f, 0x0a, 0x03, 0xfc, 0xd9, 0x53, 0xd5, 0xea, 0x82, 0x4f, 0xa2, 0x43, 0x35, 0x00, 0xbf, 0xd9, 0x83, 0x38, 0x2e, 0x23, 0xd4, 0xde, 0xab, 0xff, 0x97, 0xe6, 0xa4, 0xe4, 0xd9, 0xad, 0x8e, 0x4a, 0x66, 0x8a, 0xfd, 0x1b, 0x3b, 0x2d, 0x1d, 0x2b, 0x57, 0x96, 0xc3, 0x45, 0x9c, 0xf9, 0xff, 0x3a, 0x44, 0xcc, 0xa2, 0x1e, 0x90, 0x0e, 0x30, 0x79, 0xa2, 0x3a, 0x7e, 0x14, 0xc6, 0xf6, 0x8c, 0x3c, 0xf2, 0xb3, 0x05, 0xc2, 0xba, 0x63, 0x30, 0x68, 0x19, 0xa8, 0x57, 0x72, 0x26, 0x47, 0x01, 0xe2, 0x20, 0x4e, 0xbb, 0xbe, 0x99, 0x63, 0x75, 0xda, 0x21, 0xe8, 0x71, 0x8b, 0x35, 0x9b, 0xcd, 0x93, 0x8f, 0x00, 0xab, 0x2d, 0x8a, 0x6c, 0x31, 0x78, 0xc3, 0xeb, 0xf3, 0x90, 0xf4, 0x36, 0xec, 0xd3, 0xdb, 0x35, 0xae, 0x82, 0xce, 0xed, 0x7f, 0x52, 0xf6, 0xb3, 0xe2, 0xa4, 0xb1, 0x34, 0x65, 0x9d, 0x63 };
            var ec9 = new byte[] { 0xed, 0x81, 0x83, 0x7c, 0xe2, 0x9a, 0x96, 0xde, 0x84, 0x14, 0xd7, 0x2a, 0x22, 0x24, 0x6d, 0x98, 0xc3, 0x3f, 0x82, 0x6e, 0xae, 0xff, 0xea, 0x0c, 0x73, 0x93, 0x85, 0x67, 0x3d, 0x32, 0x72, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
            var ec10 = new byte[] { 0xac, 0xa4, 0x23, 0x42, 0xf2, 0x2e, 0xa3, 0x22, 0x3d, 0x23, 0xb3, 0x35, 0x6f, 0x5e, 0xba, 0x8b, 0x97, 0xf5, 0xb5, 0x14, 0x08, 0xe2, 0x74, 0x15, 0x8f, 0xf0, 0xd4, 0x14, 0x9f, 0x1d, 0x14, 0x3a, 0x55, 0x2a, 0xe1, 0xb8, 0xbc, 0x41, 0xd5, 0xa1, 0x28, 0x6d, 0xb3, 0x9f, 0x66, 0x93, 0x6b, 0x2d, 0x8b, 0x15, 0x34, 0x17, 0x3f, 0x80, 0x2f, 0x07, 0xa0, 0x65, 0xdd, 0x44, 0x72, 0x92, 0xd5, 0x32, 0x66, 0xf5, 0xc2, 0x2c, 0xa7, 0xf6, 0x13, 0xc5, 0x32, 0xf3, 0x52, 0xd7, 0xb8, 0xec, 0xca, 0x69, 0x29, 0x1a, 0xfd, 0xe0, 0x02, 0xba, 0x32, 0xa1, 0x44, 0x6e, 0x02, 0x82, 0xfe, 0xea, 0x0d, 0xa7, 0xb2, 0x4b, 0x1a, 0x1f, 0x3a, 0x7b, 0x73, 0x0d, 0x5d, 0x90, 0xb7, 0x32, 0x67, 0x47, 0x34, 0xa7, 0x68, 0x22, 0x35, 0x57, 0xbf, 0xc0, 0x4e, 0xf8, 0xeb, 0xa8, 0xee, 0xfe, 0x0c, 0x90, 0xf0, 0x87, 0x7e, 0xcb, 0x4a, 0xd5, 0x5d, 0xa2, 0x6d, 0x93, 0x47, 0x82, 0xc4, 0xd9, 0xef, 0xbd, 0x14, 0x56, 0x8d, 0xae, 0x17, 0xd3, 0xf5, 0x35, 0x2f, 0xb7, 0xd3, 0x4a, 0xb8, 0xfd, 0x1d, 0x6b, 0xd7, 0x91, 0xa4, 0xc6, 0x2c, 0x68, 0x20, 0x94, 0x1d, 0x54, 0xd9, 0x60, 0xe5, 0xe6, 0x82, 0xfc, 0xc2, 0xdf, 0x60, 0x4a, 0x35, 0x22, 0xfe, 0x8b, 0xf0, 0x82, 0xb7, 0xf5, 0x01, 0x4b, 0x36, 0x13, 0xca, 0x24, 0xed, 0x30, 0x3c, 0x18, 0xb3, 0xf7, 0xa9, 0x4e, 0xa1, 0x63, 0x43, 0x96, 0xc6, 0xb2, 0xd6, 0xde, 0xf4, 0xf4, 0x7c, 0xe5, 0x16, 0x6f, 0xf9, 0x02, 0x51, 0x01, 0xeb, 0x6f, 0xd4, 0x2e, 0x61, 0x9e, 0x5b, 0x0d, 0xd8, 0xa7, 0x75, 0xe5, 0xf8, 0xfa, 0xe1, 0xa8, 0x78, 0xb4, 0xa1, 0x98, 0x8c, 0x11, 0x94, 0xef, 0x32, 0xc6, 0x3a, 0xfa, 0x69, 0x91, 0x06, 0xff, 0x60, 0xf1, 0x6d, 0xee, 0x1d, 0x1d };
            var es11 = new byte[] { 0x23, 0x2b, 0xa0, 0xe6, 0xca, 0x28, 0x0d, 0x02, 0xcb, 0x8b, 0x15, 0x66, 0xe7, 0x5f, 0x5c, 0x93, 0xce, 0x00, 0xb2, 0x48, 0xbe, 0x14, 0xa3, 0xc6, 0x54, 0xdf, 0xb7, 0xdd, 0xa0, 0x8b, 0x70, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };


            var configC = new MicroRatchetConfiguration
            {
                IsClient = true,
                MaximumMessageSize = 256,
                MinimumMessageSize = 256,
                ApplicationKey = applicationKey
            };
            var configS = new MicroRatchetConfiguration
            {
                IsClient = false,
                MaximumMessageSize = 256,
                MinimumMessageSize = 256,
                ApplicationKey = applicationKey
            };

            var rngC = new FakeRandomNumberGenerator(randomC);
            var storageC = new InMemoryStorage();
            var signatureC = new Signature(privateKeyC, new SecureRandom(rngC));
            var rngS = new FakeRandomNumberGenerator(randomS);
            var storageS = new InMemoryStorage();
            var signatureS = new Signature(privateKeyS, new SecureRandom(rngS));

            var servicesC = new BouncyCastleServices(privateKeyC, storageC)
            {
                Signature = signatureC,
                RandomNumberGenerator = rngC,
            };
            servicesC.KeyAgreementFactory = new DeterministicKexFac(servicesC.KeyAgreementFactory, rngC);

            var servicesS = new BouncyCastleServices(privateKeyS, storageS)
            {
                Signature = signatureS,
                RandomNumberGenerator = rngS,
            };
            servicesS.KeyAgreementFactory = new DeterministicKexFac(servicesS.KeyAgreementFactory, rngS);

            var C = new MicroRatchetClient(servicesC, configC);
            var S = new MicroRatchetClient(servicesS, configS);

            var c1 = C.InitiateInitialization();
            var s2 = S.Receive(c1).ToSendBack;
            var c3 = C.Receive(s2).ToSendBack;
            var s4 = S.Receive(c3).ToSendBack;
            var c5 = C.Receive(s4).ToSendBack;

            //BytePrintHelper.PrintAsByteArray("ec1", c1);
            //BytePrintHelper.PrintAsByteArray("es2", s2);
            //BytePrintHelper.PrintAsByteArray("ec3", c3);
            //BytePrintHelper.PrintAsByteArray("es4", s4);

            Assert.Equal(ec1, c1);
            Assert.Equal(es2, s2);
            Assert.Equal(ec3, c3);
            Assert.Equal(es4, s4);
            Assert.Null(c5);

            var c6 = C.Send(message1);
            var s7 = S.Receive(c6).Payload;
            var s8 = S.Send(message2);
            var c9 = C.Receive(s8).Payload;
            var c10 = C.Send(message3);
            var s11 = S.Receive(c10).Payload;

            //BytePrintHelper.PrintAsByteArray("ec6", c6);
            //BytePrintHelper.PrintAsByteArray("es7", s7);
            //BytePrintHelper.PrintAsByteArray("es8", s8);
            //BytePrintHelper.PrintAsByteArray("ec9", c9);
            //BytePrintHelper.PrintAsByteArray("ec10", c10);
            //BytePrintHelper.PrintAsByteArray("es11", s11);

            Assert.Equal(ec6, c6);
            Assert.Equal(es7, s7);
            Assert.Equal(es8, s8);
            Assert.Equal(ec9, c9);
            Assert.Equal(ec10, c10);
            Assert.Equal(es11, s11);

            var em1 = new byte[256 - 48]; Array.Copy(message1, em1, message1.Length);
            var em2 = new byte[256 - 48]; Array.Copy(message2, em2, message2.Length);
            var em3 = new byte[256 - 48]; Array.Copy(message3, em3, message3.Length);
            Assert.Equal(em1, s7);
            Assert.Equal(em2, c9);
            Assert.Equal(em3, s11);
        }



        private class FakeRandomNumberGenerator : IRandomGenerator, IRandomNumberGenerator
        {
            private readonly byte[] _bytes;
            private int _ix = 0;

            public FakeRandomNumberGenerator(byte[] bytes)
            {
                _bytes = bytes;
            }

            public void AddSeedMaterial(byte[] seed) { }
            public void AddSeedMaterial(long seed) { }
            public void NextBytes(byte[] bytes) => NextBytes(new ArraySegment<byte>(bytes));
            public void NextBytes(byte[] bytes, int start, int len) => NextBytes(new ArraySegment<byte>(bytes, start, len));
            public void Generate(ArraySegment<byte> arr) => NextBytes(arr);

            public void NextBytes(ArraySegment<byte> arr)
            {
                for (int i = 0; i < arr.Count; i++)
                {
                    arr[i] = _bytes[(_ix + i) % _bytes.Length];
                }
                _ix += arr.Count;
            }
        }

        private class DeterministicKexFac : IKeyAgreementFactory
        {
            private readonly IKeyAgreementFactory _other;
            private readonly FakeRandomNumberGenerator _rng;

            public DeterministicKexFac(IKeyAgreementFactory other, FakeRandomNumberGenerator rng)
            {
                _other = other;
                _rng = rng;
            }

            public int PublicKeySize => _other.PublicKeySize;
            public IKeyAgreement Deserialize(Stream stream) => _other.Deserialize(stream);
            public IKeyAgreement GenerateNew() => new KeyAgreement(KeyGeneration.GeneratePrivateKey(new SecureRandom(_rng)));
        }
    }
}
