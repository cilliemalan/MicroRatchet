#include "pch.h"
#include <microratchet.h>
#include <internal.h>
#include "support.h"

static mr_config _cfg{ 1000, 1, 0, 3, 10, 1, 0 };

TEST(HMac, Init) {
	auto mr_ctx = mrclient_create(&_cfg);
	_hmac_ctx hmac;
	const unsigned char key[] = { 1,2,3,4,5,6,7,8 };

	int result = call_and_wait(hmac_init, mr_ctx, &hmac, mr_ctx, key, (unsigned int)sizeof(key));
	EXPECT_EQ(E_SUCCESS, result);

	mrclient_destroy(mr_ctx);
}

TEST(HMac, InitLargeKey) {
	auto mr_ctx = mrclient_create(&_cfg);
	_hmac_ctx hmac;
	const unsigned char key[] = {
		0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF,
		0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF,
		0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF,
		0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF,
		0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF,
		0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF
	};

	int result = call_and_wait(hmac_init, mr_ctx, &hmac, mr_ctx, key, (unsigned int)sizeof(key));
	EXPECT_EQ(E_SUCCESS, result);

	mrclient_destroy(mr_ctx);
}

TEST(HMac, Process) {
	auto mr_ctx = mrclient_create(&_cfg);
	_hmac_ctx hmac;
	const unsigned char key[] = { 1,2,3,4,5,6,7,8 };
	const unsigned char data[] = { 5,4,3,2,1,2,3,4 };

	int result = call_and_wait(hmac_init, mr_ctx, &hmac, mr_ctx, key, (unsigned int)sizeof(key));
	EXPECT_EQ(E_SUCCESS, result);
	result = call_and_wait(hmac_process, mr_ctx, &hmac, mr_ctx, data, (unsigned int)sizeof(data));
	EXPECT_EQ(E_SUCCESS, result);
	mrclient_destroy(mr_ctx);
}

TEST(HMac, MultiProcess) {
	auto mr_ctx = mrclient_create(&_cfg);
	_hmac_ctx hmac;
	const unsigned char key[] = { 1,2,3,4,5,6,7,8 };
	const unsigned char data[] = { 5,4,3,2,1,2,3,4 };

	int result = call_and_wait(hmac_init, mr_ctx, &hmac, mr_ctx, key, (unsigned int)sizeof(key));
	EXPECT_EQ(E_SUCCESS, result);
	result = call_and_wait(hmac_process, mr_ctx, &hmac, mr_ctx, data, (unsigned int)sizeof(data));
	EXPECT_EQ(E_SUCCESS, result);
	result = call_and_wait(hmac_process, mr_ctx, &hmac, mr_ctx, data, (unsigned int)sizeof(data));
	EXPECT_EQ(E_SUCCESS, result);
	mrclient_destroy(mr_ctx);
}

TEST(HMac, Compute1) {
	auto mr_ctx = mrclient_create(&_cfg);
	_hmac_ctx hmac;
	const unsigned char key[] = { 1, 2, 3, 4, 5, 6, 7, 8 };
	const unsigned char info[] = { 1, 2, 3, 4, 5, 6, 7, 8 };
	unsigned char output[32];
	const unsigned char expected[] = {
		0xd1, 0x29, 0x0e, 0xb2, 0x59, 0x65, 0x23, 0x3c,
		0x91, 0x3c, 0x3d, 0xeb, 0x22, 0x2e, 0x79, 0x86,
		0x68, 0x4c, 0xe6, 0xb0, 0x8d, 0x93, 0x21, 0xab,
		0xc1, 0x11, 0xd8, 0x70, 0x68, 0xe3, 0xd7, 0xf8
	};

	int result = call_and_wait(hmac_init, mr_ctx, &hmac, mr_ctx, key, (unsigned int)sizeof(key));
	EXPECT_EQ(E_SUCCESS, result);
	result = call_and_wait(hmac_process, mr_ctx, &hmac, mr_ctx, info, (unsigned int)sizeof(info));
	EXPECT_EQ(E_SUCCESS, result);
	result = call_and_wait(hmac_compute, mr_ctx, &hmac, mr_ctx, output, (unsigned int)sizeof(output));
	EXPECT_EQ(E_SUCCESS, result);
	EXPECT_BUFFEREQ(output, sizeof(output), expected, sizeof(expected));
	mrclient_destroy(mr_ctx);
}

TEST(HMac, Compute2) {
	auto mr_ctx = mrclient_create(&_cfg);
	_hmac_ctx hmac;
	const unsigned char key[] = { 1, 2, 3, 4, 5, 6, 7, 8 };
	const unsigned char info[] = {
		0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF,
		0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF,
		0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF,
		0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF,
		0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF,
		0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF
	};
	unsigned char output[32];
	const unsigned char expected[] = {
		0xbd, 0xe4, 0x45, 0x73, 0xaf, 0xad, 0xe2, 0xc0,
		0x8b, 0x2c, 0xaa, 0xc1, 0x4c, 0x46, 0xc8, 0x85,
		0xc7, 0xb2, 0x1e, 0x24, 0xf6, 0x7d, 0x76, 0xb6,
		0xaa, 0x00, 0xeb, 0xe5, 0xa1, 0xe4, 0xac, 0x0f
	};

	int result = call_and_wait(hmac_init, mr_ctx, &hmac, mr_ctx, key, (unsigned int)sizeof(key));
	EXPECT_EQ(E_SUCCESS, result);
	result = call_and_wait(hmac_process, mr_ctx, &hmac, mr_ctx, info, (unsigned int)sizeof(info));
	EXPECT_EQ(E_SUCCESS, result);
	result = call_and_wait(hmac_compute, mr_ctx, &hmac, mr_ctx, output, (unsigned int)sizeof(output));
	EXPECT_EQ(E_SUCCESS, result);
	EXPECT_BUFFEREQ(output, sizeof(output), expected, sizeof(expected));
	mrclient_destroy(mr_ctx);
}

TEST(HMac, ComputeEmpty) {
	auto mr_ctx = mrclient_create(&_cfg);
	_hmac_ctx hmac;
	const unsigned char key[] = { 0 };
	unsigned char output[32];
	const unsigned char expected[] = {
		0xb6, 0x13, 0x67, 0x9a, 0x08, 0x14, 0xd9, 0xec,
		0x77, 0x2f, 0x95, 0xd7, 0x78, 0xc3, 0x5f, 0xc5,
		0xff, 0x16, 0x97, 0xc4, 0x93, 0x71, 0x56, 0x53,
		0xc6, 0xc7, 0x12, 0x14, 0x42, 0x92, 0xc5, 0xad
	};

	int result = call_and_wait(hmac_init, mr_ctx, &hmac, mr_ctx, key, (unsigned int)0);
	EXPECT_EQ(E_SUCCESS, result);
	result = call_and_wait(hmac_compute, mr_ctx, &hmac, mr_ctx, output, (unsigned int)sizeof(output));
	EXPECT_EQ(E_SUCCESS, result);
	EXPECT_BUFFEREQ(output, sizeof(output), expected, sizeof(expected));
	mrclient_destroy(mr_ctx);
}

TEST(HMac, ComputeLargeKey) {
	auto mr_ctx = mrclient_create(&_cfg);
	_hmac_ctx hmac;
	const unsigned char key[] = {
		0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF,
		0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF,
		0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF,
		0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF,
		0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF,
		0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF
	};
	const unsigned char info[] = { 1, 2, 3, 4, 5, 6, 7, 8 };
	unsigned char output[32];
	const unsigned char expected[] = {
		0x07, 0x45, 0x19, 0x3f, 0x99, 0x2f, 0x6f, 0x7e,
		0xa2, 0xfb, 0x7d, 0xdb, 0xa0, 0x82, 0x85, 0x71,
		0xdc, 0xc9, 0x8c, 0xb5, 0x82, 0xdd, 0x05, 0xe1,
		0xd0, 0x26, 0x57, 0x7a, 0x92, 0xb1, 0x56, 0x99
	};

	int result = call_and_wait(hmac_init, mr_ctx, &hmac, mr_ctx, key, (unsigned int)sizeof(key));
	EXPECT_EQ(E_SUCCESS, result);
	result = call_and_wait(hmac_process, mr_ctx, &hmac, mr_ctx, info, (unsigned int)sizeof(info));
	EXPECT_EQ(E_SUCCESS, result);
	result = call_and_wait(hmac_compute, mr_ctx, &hmac, mr_ctx, output, (unsigned int)sizeof(output));
	EXPECT_EQ(E_SUCCESS, result);
	EXPECT_BUFFEREQ(output, sizeof(output), expected, sizeof(expected));
	mrclient_destroy(mr_ctx);
}

TEST(HMac, ComputeMultiProcess) {
	auto mr_ctx = mrclient_create(&_cfg);
	_hmac_ctx hmac;
	const unsigned char key[] = { 1, 2, 3, 4, 5, 6, 7, 8 };
	const unsigned char info[] = { 1, 2, 3, 4, 5, 6, 7, 8 };
	unsigned char output[32];
	const unsigned char expected[] = {
		0xd1, 0x29, 0x0e, 0xb2, 0x59, 0x65, 0x23, 0x3c,
		0x91, 0x3c, 0x3d, 0xeb, 0x22, 0x2e, 0x79, 0x86,
		0x68, 0x4c, 0xe6, 0xb0, 0x8d, 0x93, 0x21, 0xab,
		0xc1, 0x11, 0xd8, 0x70, 0x68, 0xe3, 0xd7, 0xf8
	};

	int result = call_and_wait(hmac_init, mr_ctx, &hmac, mr_ctx, key, (unsigned int)sizeof(key));
	EXPECT_EQ(E_SUCCESS, result);
	result = call_and_wait(hmac_process, mr_ctx, &hmac, mr_ctx, info, (unsigned int)4);
	EXPECT_EQ(E_SUCCESS, result);
	result = call_and_wait(hmac_process, mr_ctx, &hmac, mr_ctx, info + 4, (unsigned int)4);
	EXPECT_EQ(E_SUCCESS, result);
	result = call_and_wait(hmac_compute, mr_ctx, &hmac, mr_ctx, output, (unsigned int)sizeof(output));
	EXPECT_EQ(E_SUCCESS, result);
	EXPECT_BUFFEREQ(output, sizeof(output), expected, sizeof(expected));
	mrclient_destroy(mr_ctx);
}

TEST(HMac, ComputeMultiUse) {
	auto mr_ctx = mrclient_create(&_cfg);
	_hmac_ctx hmac;
	const unsigned char key[] = { 1, 2, 3, 4, 5, 6, 7, 8 };
	const unsigned char info1[] = { 1, 2, 3, 4, 5, 6, 7, 8 };
	const unsigned char info2[] = {
		0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF,
		0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF,
		0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF,
		0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF,
		0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF,
		0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF
	};
	unsigned char output[32];
	const unsigned char expected1[] = {
		0xd1, 0x29, 0x0e, 0xb2, 0x59, 0x65, 0x23, 0x3c,
		0x91, 0x3c, 0x3d, 0xeb, 0x22, 0x2e, 0x79, 0x86,
		0x68, 0x4c, 0xe6, 0xb0, 0x8d, 0x93, 0x21, 0xab,
		0xc1, 0x11, 0xd8, 0x70, 0x68, 0xe3, 0xd7, 0xf8
	};
	const unsigned char expected2[] = {
		0xbd, 0xe4, 0x45, 0x73, 0xaf, 0xad, 0xe2, 0xc0,
		0x8b, 0x2c, 0xaa, 0xc1, 0x4c, 0x46, 0xc8, 0x85,
		0xc7, 0xb2, 0x1e, 0x24, 0xf6, 0x7d, 0x76, 0xb6,
		0xaa, 0x00, 0xeb, 0xe5, 0xa1, 0xe4, 0xac, 0x0f
	};

	int result = call_and_wait(hmac_init, mr_ctx, &hmac, mr_ctx, key, (unsigned int)sizeof(key));
	EXPECT_EQ(E_SUCCESS, result);
	result = call_and_wait(hmac_process, mr_ctx, &hmac, mr_ctx, info1, (unsigned int)4);
	EXPECT_EQ(E_SUCCESS, result);
	result = call_and_wait(hmac_process, mr_ctx, &hmac, mr_ctx, info1 + 4, (unsigned int)4);
	EXPECT_EQ(E_SUCCESS, result);
	result = call_and_wait(hmac_compute, mr_ctx, &hmac, mr_ctx, output, (unsigned int)sizeof(output));
	EXPECT_EQ(E_SUCCESS, result);
	EXPECT_BUFFEREQ(output, sizeof(output), expected1, sizeof(expected1));

	result = call_and_wait(hmac_process, mr_ctx, &hmac, mr_ctx, info2, (unsigned int)sizeof(info2));
	EXPECT_EQ(E_SUCCESS, result);
	result = call_and_wait(hmac_compute, mr_ctx, &hmac, mr_ctx, output, (unsigned int)sizeof(output));
	EXPECT_EQ(E_SUCCESS, result);
	EXPECT_BUFFEREQ(output, sizeof(output), expected2, sizeof(expected2));
	mrclient_destroy(mr_ctx);
}
