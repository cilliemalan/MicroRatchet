#include "pch.h"
#include <microratchet.h>
#include "support.h"

//[InlineData(new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F }, new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F }, new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F }, new byte[] { 0x2e, 0x32, 0xae, 0x56, 0x84, 0xec, 0x3b, 0x3b, 0x9e, 0x65, 0xd5, 0xf3, 0x42, 0xe1, 0x56, 0x1b })]
static mr_config _cfg{ 1000, 1, 0, 3, 10, 1, 0 };

TEST(GMac, Init) {
	auto mr_ctx = mrclient_create(&_cfg);
	auto gmac = mr_gmac_create(mr_ctx);
	const unsigned char key[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };
	const unsigned char iv[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };

	int result = call_and_wait(mr_gmac_init, mr_ctx, gmac, key, sizeof(key), iv, sizeof(iv));
	EXPECT_EQ(E_SUCCESS, result);

	mr_gmac_destroy(gmac);
	mrclient_destroy(mr_ctx);
}

TEST(GMac, Process) {
	auto mr_ctx = mrclient_create(&_cfg);
	auto gmac = mr_gmac_create(mr_ctx);
	const unsigned char key[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };
	const unsigned char iv[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };
	const unsigned char info[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };

	int result = call_and_wait(mr_gmac_init, mr_ctx, gmac, key, sizeof(key), iv, sizeof(iv));
	EXPECT_EQ(E_SUCCESS, result);

	result = call_and_wait(mr_gmac_process, mr_ctx, gmac, info, sizeof(info));
	EXPECT_EQ(E_SUCCESS, result);

	mr_gmac_destroy(gmac);
	mrclient_destroy(mr_ctx);
}

void computetest(
	const unsigned char* key, unsigned int keysize,
	const unsigned char* iv, unsigned int ivsize,
	const unsigned char* info, unsigned int infosize,
	const unsigned char* expected, unsigned int expectedsize)
{
	auto mr_ctx = mrclient_create(&_cfg);
	auto gmac = mr_gmac_create(mr_ctx);
	unsigned char *output = new unsigned char[expectedsize];

	int result = call_and_wait(mr_gmac_init, mr_ctx, gmac, key, keysize, iv, ivsize);
	EXPECT_EQ(E_SUCCESS, result);

	result = call_and_wait(mr_gmac_process, mr_ctx, gmac, info, infosize);
	EXPECT_EQ(E_SUCCESS, result);

	result = call_and_wait(mr_gmac_compute, mr_ctx, gmac, output, expectedsize);
	EXPECT_EQ(E_SUCCESS, result);

	ASSERT_BUFFEREQ(output, expectedsize, expected, expectedsize);
	mr_gmac_destroy(gmac);
	mrclient_destroy(mr_ctx);
	delete[] output;
}

TEST(GMac, Compute1) {
	const unsigned char key[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };
	const unsigned char iv[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };
	const unsigned char info[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };
	const unsigned char expected[] = { 0x2e, 0x32, 0xae, 0x56, 0x84, 0xec, 0x3b, 0x3b, 0x9e, 0x65, 0xd5, 0xf3, 0x42, 0xe1, 0x56, 0x1b };

	computetest(key, sizeof(key),
		iv, sizeof(iv),
		info, sizeof(info),
		expected, sizeof(expected));
}

TEST(GMac, Compute2) {
	const unsigned char key[] = { 0x65, 0xc1, 0x92, 0xe8, 0xe1, 0xce, 0xce, 0x62, 0x79, 0x0b, 0x98, 0x17, 0x1a, 0x2f, 0xef, 0xff };
	const unsigned char iv[] = { 0x2f, 0x1f, 0x8c, 0x51, 0xe5, 0x7e, 0x95, 0x98, 0xf7, 0x7d, 0x08, 0xd8, 0x5f, 0x94, 0xec, 0x92 };
	const unsigned char info[] = { 0xdc, 0xa0, 0x3c, 0xd7, 0x4b, 0x59, 0x29, 0xe6, 0xe3, 0x49, 0x2c, 0xa9, 0x91, 0x59, 0xcc, 0x84 };
	const unsigned char expected[] = { 0x05, 0x3e, 0xb4, 0x79, 0x79, 0xa2, 0x87, 0x34, 0x92, 0x02, 0xa1, 0x8d, 0x2f, 0x53, 0x9f, 0x31 };

	computetest(key, sizeof(key),
		iv, sizeof(iv),
		info, sizeof(info),
		expected, sizeof(expected));
}

TEST(GMac, Compute3) {
	const unsigned char key[] = { 0x65, 0xc1, 0x92, 0xe8, 0xe1, 0xce, 0xce, 0x62, 0x79, 0x0b, 0x98, 0x17, 0x1a, 0x2f, 0xef, 0xff };
	const unsigned char iv[] = { 0x2f, 0x1f, 0x8c, 0x51, 0xe5, 0x7e, 0x95, 0x98, 0xf7, 0x7d, 0x08, 0xd8, 0x5f, 0x94, 0xec, 0x92 };
	const unsigned char info[] = { 0xdc, 0xa0, 0x3c, 0xd7, 0x4b, 0x59, 0x29, 0xe6, 0xe3, 0x49, 0x2c, 0xa9, 0x91, 0x59, 0xcc, 0x84 };
	const unsigned char expected[] = { 0x05, 0x3e, 0xb4, 0x79, 0x79, 0xa2, 0x87, 0x34, 0x92, 0x02, 0xa1, 0x8d };

	computetest(key, sizeof(key),
		iv, sizeof(iv),
		info, sizeof(info),
		expected, sizeof(expected));
}

TEST(GMac, Compute4) {
	const unsigned char key[] = { 0x65, 0xc1, 0x92, 0xe8, 0xe1, 0xce, 0xce, 0x62, 0x79, 0x0b, 0x98, 0x17, 0x1a, 0x2f, 0xef, 0xff };
	const unsigned char iv[] = { 0x2f, 0x1f, 0x8c, 0x51, 0xe5, 0x7e, 0x95, 0x98, 0xf7, 0x7d, 0x08, 0xd8, 0x5f, 0x94, 0xec, 0x92 };
	const unsigned char info[] = { 0xdc, 0xa0, 0x3c, 0xd7, 0x4b, 0x59, 0x29, 0xe6, 0xe3, 0x49, 0x2c, 0xa9, 0x91, 0x59, 0xcc, 0x84 };
	const unsigned char expected[] = { 0x05, 0x3e, 0xb4, 0x79, 0x79, 0xa2, 0x87, 0x34 };

	computetest(key, sizeof(key),
		iv, sizeof(iv),
		info, sizeof(info),
		expected, sizeof(expected));
}

TEST(GMac, Compute5) {
	const unsigned char key[] = { 0x65, 0xc1, 0x92, 0xe8, 0xe1, 0xce, 0xce, 0x62, 0x79, 0x0b, 0x98, 0x17, 0x1a, 0x2f, 0xef, 0xff };
	const unsigned char iv[] = { 0x2f, 0x1f, 0x8c, 0x51, 0xe5, 0x7e, 0x95, 0x98, 0xf7, 0x7d, 0x08, 0xd8, 0x5f, 0x94, 0xec, 0x92 };
	const unsigned char info[] = { 0xdc, 0xa0, 0x3c, 0xd7, 0x4b, 0x59, 0x29, 0xe6, 0xe3, 0x49, 0x2c, 0xa9, 0x91, 0x59, 0xcc, 0x84 };
	const unsigned char expected[] = { 0x05, 0x3e, 0xb4, 0x79 };

	computetest(key, sizeof(key),
		iv, sizeof(iv),
		info, sizeof(info),
		expected, sizeof(expected));
}

TEST(GMac, Compute6) {
	const unsigned char key[] = { 0x01, 0x7d, 0x08, 0xd8, 0x5f, 0x94, 0xce, 0xf7, 0x7d, 0x08, 0x2f, 0x1f, 0x8c, 0x2f, 0xef, 0xff };
	const unsigned char iv[] = { 0x5f, 0x94, 0xec, 0x92 };
	const unsigned char info[] = { 0x91, 0x59, 0xcc, 0x84 };
	const unsigned char expected[] = { 0x99, 0xd2, 0x09, 0xb3, 0x24, 0xb7, 0x31, 0xe2, 0x78, 0x30, 0x63, 0xd6, 0xb5, 0x72, 0x87, 0xbc };

	computetest(key, sizeof(key),
		iv, sizeof(iv),
		info, sizeof(info),
		expected, sizeof(expected));
}