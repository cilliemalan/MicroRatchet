#include "pch.h"
#include <microratchet.h>
#include "support.h"

static mr_config _cfg{ 1000, 1, 0, 3, 10, 1, 0 };

TEST(Sha, Create) {
	auto mr_ctx = mrclient_create(&_cfg);
	auto sha = mr_sha_create(mr_ctx);
	EXPECT_NE(nullptr, sha);
	mrclient_destroy(mr_ctx);
}

TEST(Sha, Init) {
	auto mr_ctx = mrclient_create(&_cfg);
	auto sha = mr_sha_create(mr_ctx);
	int result = call_and_wait(mr_sha_init, mr_ctx, sha);
	EXPECT_EQ(E_SUCCESS, result);
}

TEST(Sha, Process) {
	const unsigned char data[]{ 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };

	auto mr_ctx = mrclient_create(&_cfg);
	auto sha = mr_sha_create(mr_ctx);
	int result = call_and_wait(mr_sha_init, mr_ctx, sha);
	result = call_and_wait(mr_sha_process, mr_ctx, sha, data, (unsigned int)sizeof(data));
	EXPECT_EQ(E_SUCCESS, result);
}

template<unsigned int L1, unsigned int L2>
void testsha(const unsigned char (&data)[L1], const unsigned char(&expected_output)[L2])
{
	unsigned char output[32];

	auto mr_ctx = mrclient_create(&_cfg);
	auto sha = mr_sha_create(mr_ctx);
	int result = call_and_wait(mr_sha_init, mr_ctx, sha);
	EXPECT_EQ(E_SUCCESS, result);
	if(data && sizeof(data) > 0) result = call_and_wait(mr_sha_process, mr_ctx, sha, data, (unsigned int)sizeof(data));
	EXPECT_EQ(E_SUCCESS, result);
	result = call_and_wait(mr_sha_compute, mr_ctx, sha, output, (unsigned int)sizeof(output));
	EXPECT_EQ(E_SUCCESS, result);
	ASSERT_BUFFEREQ(expected_output, sizeof(expected_output), output, sizeof(output));
}

TEST(Sha, ComputeEmpty) {
	unsigned char output[32];
	unsigned char expected[32]{
		0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14,
		0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24,
		0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c,
		0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55
	};

	auto mr_ctx = mrclient_create(&_cfg);
	auto sha = mr_sha_create(mr_ctx);
	int result = call_and_wait(mr_sha_init, mr_ctx, sha);
	EXPECT_EQ(E_SUCCESS, result);
	result = call_and_wait(mr_sha_compute, mr_ctx, sha, output, (unsigned int)sizeof(output));
	EXPECT_EQ(E_SUCCESS, result);
	ASSERT_BUFFEREQ(expected, sizeof(expected), output, sizeof(output));
}

TEST(Sha, ComputeShort1) {
	const unsigned char input[]{ 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
	const unsigned char output[32]{
		0x66, 0x84, 0x0D, 0xDA, 0x15, 0x4E, 0x8A, 0x11,
		0x3C, 0x31, 0xDD, 0x0A, 0xD3, 0x2F, 0x7F, 0x3A,
		0x36, 0x6A, 0x80, 0xE8, 0x13, 0x69, 0x79, 0xD8,
		0xF5, 0xA1, 0x01, 0xD3, 0xD2, 0x9D, 0x6F, 0x72
	};

	testsha(input, output);
}

TEST(Sha, ComputeShort2) {
	const unsigned char input[]{ 0xF1, 0x02, 0xF3, 0x04, 0xF5, 0x06, 0xF7, 0x08 };
	const unsigned char output[32]{
		0xAE, 0xB6, 0xB8, 0xE3, 0xE2, 0xF5, 0x96, 0x04,
		0xA3, 0xDD, 0x7F, 0xCC, 0xD7, 0x9A, 0x77, 0x19,
		0x81, 0x89, 0xC5, 0xCF, 0x44, 0x8C, 0x8A, 0x62,
		0x7D, 0xF8, 0x42, 0x86, 0x60, 0x4F, 0x8F, 0x7A
	};

	testsha(input, output);
}

TEST(Sha, ComputeLong) {
	const unsigned char input[]{
		0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
		0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28,
		0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38,
		0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48,
		0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58,
		0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68,
		0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78,
		0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88,
		0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
		0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28,
		0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38,
		0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48,
		0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58,
		0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68,
		0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78,
		0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88,
	};
	const unsigned char output[32]{
		0x3B, 0x7F, 0xFF, 0xD4, 0xFC, 0x0D, 0xCB, 0xD5,
		0x2D, 0xAD, 0xB0, 0xCC, 0xC6, 0xFF, 0xC3, 0x40,
		0x69, 0x67, 0x6A, 0x4A, 0x1D, 0xFD, 0x44, 0x64,
		0x57, 0xB4, 0xC9, 0xBE, 0x46, 0x04, 0xDD, 0xA1
	};

	testsha(input, output);
}

TEST(Sha, ComputeTwice) {
	const unsigned char input1[]{ 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
	const unsigned char expected1[32]{
		0x66, 0x84, 0x0D, 0xDA, 0x15, 0x4E, 0x8A, 0x11,
		0x3C, 0x31, 0xDD, 0x0A, 0xD3, 0x2F, 0x7F, 0x3A,
		0x36, 0x6A, 0x80, 0xE8, 0x13, 0x69, 0x79, 0xD8,
		0xF5, 0xA1, 0x01, 0xD3, 0xD2, 0x9D, 0x6F, 0x72
	};
	const unsigned char input2[]{ 0xF1, 0x02, 0xF3, 0x04, 0xF5, 0x06, 0xF7, 0x08 };
	unsigned char expected2[32]{
		0xAE, 0xB6, 0xB8, 0xE3, 0xE2, 0xF5, 0x96, 0x04,
		0xA3, 0xDD, 0x7F, 0xCC, 0xD7, 0x9A, 0x77, 0x19,
		0x81, 0x89, 0xC5, 0xCF, 0x44, 0x8C, 0x8A, 0x62,
		0x7D, 0xF8, 0x42, 0x86, 0x60, 0x4F, 0x8F, 0x7A
	};
	unsigned char output[32];

	auto mr_ctx = mrclient_create(&_cfg);
	auto sha = mr_sha_create(mr_ctx);
	int result = call_and_wait(mr_sha_init, mr_ctx, sha);
	EXPECT_EQ(E_SUCCESS, result);
	result = call_and_wait(mr_sha_process, mr_ctx, sha, input1, (unsigned int)sizeof(input1));
	EXPECT_EQ(E_SUCCESS, result);
	result = call_and_wait(mr_sha_compute, mr_ctx, sha, output, (unsigned int)sizeof(output));
	EXPECT_EQ(E_SUCCESS, result);
	ASSERT_BUFFEREQ(expected1, sizeof(expected1), output, sizeof(output));
	result = call_and_wait(mr_sha_process, mr_ctx, sha, input2, (unsigned int)sizeof(input2));
	EXPECT_EQ(E_SUCCESS, result);
	result = call_and_wait(mr_sha_compute, mr_ctx, sha, output, (unsigned int)sizeof(output));
	EXPECT_EQ(E_SUCCESS, result);
	ASSERT_BUFFEREQ(expected2, sizeof(expected2), output, sizeof(output));
}