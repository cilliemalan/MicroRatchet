using MicroRatchet.BouncyCastle;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Xunit;

namespace MicroRatchet.Tests
{
    public class AesCtrModeTests
    {
        [Fact]
        public void BasicTest()
        {
            var r = new Random();
            byte[] iv = new byte[16];
            byte[] key = new byte[32];
            byte[] message = new byte[100];
            r.NextBytes(iv);
            r.NextBytes(key);
            r.NextBytes(message);

            Aes a = new Aes();
            a.Initialize(true, key);
            AesCtrMode c = new AesCtrMode(a, iv);
            var encrypted = c.Process(message);
            a.Initialize(true, key);
            c = new AesCtrMode(a, iv);
            var decrypted = c.Process(encrypted);

            Assert.Equal(message, decrypted);
        }

        [InlineData(1)]
        [InlineData(5)]
        [InlineData(8)]
        [InlineData(10)]
        [InlineData(15)]
        [InlineData(16)]
        [InlineData(17)]
        [InlineData(20)]
        [InlineData(30)]
        [InlineData(31)]
        [InlineData(32)]
        [InlineData(33)]
        [InlineData(60)]
        [InlineData(63)]
        [InlineData(64)]
        [InlineData(65)]
        [InlineData(1000)]
        [InlineData(1023)]
        [InlineData(1024)]
        [InlineData(1025)]
        [InlineData(1000000)]
        [Theory]
        public void MultiSizeTest(int size)
        {
            var r = new Random();
            byte[] iv = new byte[16];
            byte[] key = new byte[32];
            byte[] message = new byte[size];
            r.NextBytes(iv);
            r.NextBytes(key);
            r.NextBytes(message);

            Aes a = new Aes();
            a.Initialize(true, key);
            AesCtrMode c = new AesCtrMode(a, iv);
            var encrypted = c.Process(message);
            a.Initialize(true, key);
            c = new AesCtrMode(a, iv);
            var decrypted = c.Process(encrypted);

            Assert.Equal(message, decrypted);
        }

        [Fact]
        public void RepeatibilityTest()
        {
            var r = new Random();

            for (int i = 0; i < 100; i++)
            {
                byte[] iv = new byte[16];
                byte[] key = new byte[32];
                byte[] message = new byte[100];
                r.NextBytes(iv);
                r.NextBytes(key);
                r.NextBytes(message);

                Aes a = new Aes();
                AesCtrMode c = new AesCtrMode(a, iv);
                a.Initialize(true, key);
                var encrypted = c.Process(message);
                a.Initialize(true, key);
                c = new AesCtrMode(a, iv);
                var decrypted = c.Process(encrypted);

                Assert.Equal(message, decrypted);
            }
        }

        [Fact]
        public void AlterTest()
        {
            var r = new Random();

            for (int i = 0; i < 100; i++)
            {
                byte[] iv = new byte[16];
                byte[] key = new byte[32];
                byte[] message = new byte[100];
                r.NextBytes(iv);
                r.NextBytes(key);
                r.NextBytes(message);

                Aes a = new Aes();
                AesCtrMode c = new AesCtrMode(a, iv);
                a.Initialize(true, key);
                var encrypted = c.Process(message);
                encrypted[r.Next(encrypted.Length)]++;
                a.Initialize(true, key);
                c = new AesCtrMode(a, iv);
                var decrypted = c.Process(encrypted);

                Assert.NotNull(decrypted);
                Assert.NotEqual(message, decrypted);
            }
        }

        [Fact]
        public void Offset1Test()
        {
            var r = new Random();
            byte[] iv = new byte[16];
            byte[] key = new byte[32];
            byte[] message = new byte[100];
            r.NextBytes(iv);
            r.NextBytes(key);
            r.NextBytes(message);

            Aes a = new Aes();
            AesCtrMode c = new AesCtrMode(a, iv);
            a.Initialize(true, key);
            var encrypted = c.Process(new ArraySegment<byte>(message, 10, 80));
            a.Initialize(true, key);
            c = new AesCtrMode(a, iv);
            var decrypted = c.Process(encrypted);

            Assert.Equal(message.Skip(10).Take(80).ToArray(), decrypted);
        }

        [Fact]
        public void Offset2Test()
        {
            var r = new Random();
            byte[] iv = new byte[16];
            byte[] key = new byte[32];
            byte[] message = new byte[100];
            r.NextBytes(iv);
            r.NextBytes(key);
            r.NextBytes(message);

            Aes a = new Aes();
            AesCtrMode c = new AesCtrMode(a, iv);
            a.Initialize(true, key);
            var encrypted = c.Process(new ArraySegment<byte>(message, 10, 80));
            var enc2 = new byte[100];
            Array.Copy(encrypted, 0, enc2, 10, 80);
            a.Initialize(true, key);
            c = new AesCtrMode(a, iv);
            var decrypted = c.Process(new ArraySegment<byte>(enc2, 10, 80));

            Assert.Equal(message.Skip(10).Take(80).ToArray(), decrypted);
        }

        [Fact]
        public void ByteByByteTest()
        {
            var r = new Random();
            byte[] iv = new byte[16];
            byte[] key = new byte[32];
            byte[] message = new byte[100];
            r.NextBytes(iv);
            r.NextBytes(key);
            r.NextBytes(message);

            Aes a = new Aes();
            AesCtrMode c = new AesCtrMode(a, iv);
            a.Initialize(true, key);
            var encryptedA = c.Process(message);
            c = new AesCtrMode(a, iv);
            var encryptedB = Enumerable.Range(0, message.Length)
                .Select(i => c.Process(new ArraySegment<byte>(message, i, 1)).AsEnumerable())
                .Aggregate((x, y) => (x ?? new byte[0]).Concat(y))
                .ToArray();

            Assert.Equal(encryptedA, encryptedB);
        }

        [Theory]
        [InlineData(new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, new byte[] { 0xdc, 0x95, 0xc0, 0x78, 0xa2, 0x40, 0x89, 0x89 })]
        [InlineData(new byte[] { 0x07, 0x0a, 0x0b, 0x0c, 0x0d, 0x07, 0x45, 0x19, 0x3f, 0x99, 0x2f, 0x6f, 0x7e, 0xa2, 0xfb, 0x71 }, new byte[] { 0xb2, 0x59, 0x65, 0x23, 0x3c, 0x91, 0x3c, 0x3d, 0xeb, 0x22, 0x2e, 0x79, 0x86, 0x68, 0x4c, 0xe6 }, new byte[] { 0xe2, 0xc0, 0x8b, 0x2c, 0xaa, 0xc1, 0x4c, 0x46, 0xc8, 0x85, 0xc7, 0xb2, 0x1e, 0x24, 0xf6, 0x7d }, new byte[] { 0x8d, 0x0e, 0x1d, 0x3a, 0xff, 0xf9, 0x72, 0x5f, 0xa9, 0xf0, 0xee, 0x58, 0x63, 0x82, 0x4d, 0x07 })]
        [InlineData(new byte[] { 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x07, 0x45, 0x19, 0x3f, 0x99, 0x2f, 0x6f, 0x7e, 0xa2, 0xfb, 0x71 }, new byte[] { 0xb2, 0x59, 0x65, 0x23, 0x3c, 0x91, 0x3c, 0x3d, 0xeb, 0x22, 0x2e, 0x79, 0x86, 0x68, 0x4c, 0xe6 }, new byte[] { 0x3d, 0xde, 0xd7, 0x5d, 0x30, 0x4e, 0x18, 0x5c, 0xb7, 0xf9, 0x9b, 0xe2, 0xac, 0x97, 0x91, 0x3f }, new byte[] { 0x21, 0xa5, 0x77, 0xd9, 0xf9, 0xb5, 0x13, 0x3a, 0x7f, 0x28, 0xbc, 0x41, 0x03, 0x6c, 0xda, 0xfd })]
        [InlineData(new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, new byte[] { 0x66, 0xe9, 0x4b, 0xd4, 0xef, 0x8a, 0x2c, 0x3b })]
        [InlineData(new byte[] { 0x08, 0x19, 0x3f, 0x99, 0x2f, 0xdc, 0xc9, 0x8c, 0xb5, 0x82, 0xdd, 0x05, 0xe1, 0xd0, 0x26, 0x99 }, new byte[] { 0x07, 0x45, 0x19, 0x3f, 0x99, 0x2f, 0x6f, 0x7e, 0xa2, 0xfb, 0x7d, 0xdb, 0xa0, 0x82, 0x85, 0x71 }, new byte[] { 0xe4, 0x9e, 0xbb, 0xd9, 0xa7, 0x0e, 0x5b, 0xa1 }, new byte[] { 0x24, 0xdf, 0x56, 0xd8, 0xe5, 0x38, 0x5f, 0xeb })]
        [InlineData(new byte[] { 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x07, 0x45, 0x19, 0x3f, 0x99, 0x2f, 0x6f, 0x7e, 0xa2, 0xfb, 0x7d, 0xdb, 0xa0, 0x82, 0x85, 0x71 }, new byte[] { 0xb2, 0x59, 0x65, 0x23, 0x3c, 0x91, 0x3c, 0x3d, 0xeb, 0x22, 0x2e, 0x79, 0x86, 0x68, 0x4c, 0xe6 }, new byte[] { 0x3d, 0xde, 0xd7, 0x5d, 0x30, 0x4e, 0x18, 0x5c, 0xb7, 0xf9, 0x9b, 0xe2, 0xac, 0x97, 0x91, 0x3f }, new byte[] { 0x63, 0x09, 0x94, 0xb9, 0x2d, 0xa2, 0xcf, 0x94, 0x2c, 0xc1, 0x08, 0xdc, 0x8e, 0x18, 0xa5, 0xec })]
        [InlineData(new byte[] { 0x07, 0x45, 0x19, 0x3f, 0x99, 0x2f, 0x6f, 0x7e, 0xa2, 0xfb, 0x7d, 0xdb, 0xa0, 0x82, 0x85, 0x71, 0xdc, 0xc9, 0x8c, 0xb5, 0x82, 0xdd, 0x05, 0xe1, 0xd0, 0x26, 0x57, 0x7a, 0x92, 0xb1, 0x56, 0x99 }, new byte[] { 0x07, 0x45, 0x19, 0x3f, 0x99, 0x2f, 0x6f, 0x7e, 0xa2, 0xfb, 0x7d, 0xdb, 0xa0, 0x82, 0x85, 0x71 }, new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 }, new byte[] { 0x7c, 0x06, 0xcc, 0xe2, 0x24, 0x3b, 0xda, 0x53 })]
        [InlineData(new byte[] { 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x07, 0x45, 0x19, 0x3f, 0x99, 0x2f, 0x6f, 0x7e, 0xa2, 0xfb, 0x7d, 0xdb, 0xa0, 0x82, 0x85, 0x71 }, new byte[] { 0xb2, 0x59, 0x65, 0x23, 0x3c, 0x91, 0x3c, 0x3d, 0xeb, 0x22, 0x2e, 0x79, 0x86, 0x68, 0x4c, 0xe6 }, new byte[] { 0xe2, 0xc0, 0x8b, 0x2c, 0xaa, 0xc1, 0x4c, 0x46, 0xc8, 0x85, 0xc7, 0xb2, 0x1e, 0x24, 0xf6, 0x7d }, new byte[] { 0xbc, 0x17, 0xc8, 0xc8, 0xb7, 0x2d, 0x9b, 0x8e, 0x53, 0xbd, 0x54, 0x8c, 0x3c, 0xab, 0xc2, 0xae })]
        [InlineData(new byte[] { 0x07, 0x45, 0x19, 0x3f, 0x99, 0x2f, 0x6f, 0x7e, 0xa2, 0xfb, 0x7d, 0xdb, 0xa0, 0x82, 0x85, 0x71, 0xdc, 0xc9, 0x8c, 0xb5, 0x82, 0xdd, 0x05, 0xe1, 0xd0, 0x26, 0x57, 0x7a, 0x92, 0xb1, 0x56, 0x99 }, new byte[] { 0x07, 0x45, 0x19, 0x3f, 0x99, 0x2f, 0x6f, 0x7e, 0xa2, 0xfb, 0x7d, 0xdb, 0xa0, 0x82, 0x85, 0x71 }, new byte[] { 0xe4, 0x9e, 0xbb, 0xd9, 0xa7, 0x0e, 0x5b, 0xa1 }, new byte[] { 0x99, 0x9a, 0x74, 0x3f, 0x86, 0x33, 0x86, 0xfa })]
        [InlineData(new byte[] { 0x09, 0x19, 0x3f, 0x99, 0x2f, 0xdc, 0xc9, 0x8c, 0xb5, 0x82, 0xdd, 0x05, 0xe1, 0xd0, 0x26, 0x99 }, new byte[] { 0x07, 0x45, 0x19, 0x3f, 0x99, 0x2f, 0x6f, 0x7e, 0xa2, 0xfb, 0x7d, 0xdb, 0xa0, 0x82, 0x85, 0x71 }, new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 }, new byte[] { 0xa1, 0x25, 0x4c, 0x70, 0xd9, 0xab, 0x60, 0x30 })]
        [InlineData(new byte[] { 0x0a, 0x19, 0x3f, 0x99, 0x2f, 0xdc, 0xc9, 0x8c, 0xb5, 0x82, 0xdd, 0x05, 0xe1, 0xd0, 0x26, 0x99 }, new byte[] { 0x07, 0x45, 0x19, 0x3f }, new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 }, new byte[] { 0xc3, 0xea, 0xcd, 0x0e, 0x1b, 0x9d, 0x6b, 0x91 })]
        [InlineData(new byte[] { 0x0b, 0x19, 0x3f, 0x99, 0x2f, 0xdc, 0xc9, 0x8c, 0xb5, 0x82, 0xdd, 0x05, 0xe1, 0xd0, 0x26, 0x99 }, new byte[] { 0x07, 0x45, 0x19, 0x3f, 0x99, 0x2f, 0x6f, 0x7e, 0xa2, 0xfb, 0x7d, 0xdb, 0xa0, 0x82, 0x85, 0x71, 0x07, 0x45, 0x19, 0x3f, 0x99, 0x2f, 0x6f, 0x7e, 0xa2, 0xfb, 0x7d, 0xdb, 0xa0, 0x82, 0x85, 0x71 }, new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 }, new byte[] { 0x7b, 0xf9, 0x38, 0x63, 0xec, 0xe8, 0x09, 0xf8 })]
        public void ReferenceTest(byte[] key, byte[] iv, byte[] input, byte[] output)
        {
            Aes a = new Aes();
            a.Initialize(true, key);
            AesCtrMode c = new AesCtrMode(a, iv);
            var encrypted = c.Process(input);

            Assert.Equal(output, encrypted);
        }
    }
}
