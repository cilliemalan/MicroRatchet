using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using Xunit;

namespace MicroRatchet.Tests
{
    public class CipherTests
    {
        [Fact]
        public void BasicTest()
        {
            var r = new Random();
            byte[] iv = new byte[32];
            byte[] key = new byte[32];
            byte[] message = new byte[100];
            r.NextBytes(iv);
            r.NextBytes(key);
            r.NextBytes(message);

            Cipher c = new Cipher();
            c.Initialize(key, iv);
            var encrypted = c.Encrypt(message);
            c.Initialize(key, iv);
            var decrypted = c.Decrypt(encrypted);

            Assert.Equal(message, decrypted);
        }

        [Fact]
        public void RepeatibilityTest()
        {
            var r = new Random();

            for (int i = 0; i < 100; i++)
            {
                byte[] iv = new byte[32];
                byte[] key = new byte[32];
                byte[] message = new byte[100];
                r.NextBytes(iv);
                r.NextBytes(key);
                r.NextBytes(message);

                Cipher c = new Cipher();
                c.Initialize(key, iv);
                var encrypted = c.Encrypt(message);
                c.Initialize(key, iv);
                var decrypted = c.Decrypt(encrypted);

                Assert.Equal(message, decrypted);
            }
        }

        [Fact]
        public void AlterTest()
        {
            var r = new Random();

            for (int i = 0; i < 100; i++)
            {
                byte[] iv = new byte[32];
                byte[] key = new byte[32];
                byte[] message = new byte[100];
                r.NextBytes(iv);
                r.NextBytes(key);
                r.NextBytes(message);

                Cipher c = new Cipher();
                c.Initialize(key, iv);
                var encrypted = c.Encrypt(message);
                encrypted[r.Next(encrypted.Length)]++;
                c.Initialize(key, iv);
                var decrypted = c.Decrypt(encrypted);

                Assert.NotNull(decrypted);
                Assert.NotEqual(message, decrypted);
            }
        }

        [Fact]
        public void Offset1Test()
        {
            var r = new Random();
            byte[] iv = new byte[32];
            byte[] key = new byte[32];
            byte[] message = new byte[100];
            r.NextBytes(iv);
            r.NextBytes(key);
            r.NextBytes(message);

            Cipher c = new Cipher();
            c.Initialize(key, iv);
            var encrypted = c.Encrypt(new ArraySegment<byte>(message, 10, 80));
            c.Initialize(key, iv);
            var decrypted = c.Decrypt(encrypted);

            Assert.Equal(message.Skip(10).Take(80).ToArray(), decrypted);
        }

        [Fact]
        public void Offset2Test()
        {
            var r = new Random();
            byte[] iv = new byte[32];
            byte[] key = new byte[32];
            byte[] message = new byte[100];
            r.NextBytes(iv);
            r.NextBytes(key);
            r.NextBytes(message);

            Cipher c = new Cipher();
            c.Initialize(key, iv);
            var encrypted = c.Encrypt(new ArraySegment<byte>(message, 10, 80));
            var enc2 = new byte[100];
            Array.Copy(encrypted, 0, enc2, 10, 80);
            c.Initialize(key, iv);
            var decrypted = c.Decrypt(new ArraySegment<byte>(enc2, 10, 80));

            Assert.Equal(message.Skip(10).Take(80).ToArray(), decrypted);
        }

        [Theory]
        [InlineData(new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, new byte[] { 0x93, 0xb7, 0x9c, 0xc9, 0xea, 0x34, 0x75, 0x62 })]
        [InlineData(new byte[] { 0x07, 0x45, 0x19, 0x3f, 0x99, 0x2f, 0x6f, 0x7e, 0xa2, 0xfb, 0x7d, 0xdb, 0xa0, 0x82, 0x85, 0x71, 0xdc, 0xc9, 0x8c, 0xb5, 0x82, 0xdd, 0x05, 0xe1, 0xd0, 0x26, 0x57, 0x7a, 0x92, 0xb1, 0x56, 0x99 }, new byte[] { 0x07, 0x45, 0x19, 0x3f, 0x99, 0x2f, 0x6f, 0x7e, 0xa2, 0xfb, 0x7d, 0xdb, 0xa0, 0x82, 0x85, 0x71 }, new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 }, new byte[] { 0xe4, 0x9e, 0xbb, 0xd9, 0xa7, 0x0e, 0x5b, 0xa1 })]
        [InlineData(new byte[] { 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x07, 0x45, 0x19, 0x3f, 0x99, 0x2f, 0x6f, 0x7e, 0xa2, 0xfb, 0x7d, 0xdb, 0xa0, 0x82, 0x85, 0x71 }, new byte[] { 0xb2, 0x59, 0x65, 0x23, 0x3c, 0x91, 0x3c, 0x3d, 0xeb, 0x22, 0x2e, 0x79, 0x86, 0x68, 0x4c, 0xe6 }, new byte[] { 0xe2, 0xc0, 0x8b, 0x2c, 0xaa, 0xc1, 0x4c, 0x46, 0xc8, 0x85, 0xc7, 0xb2, 0x1e, 0x24, 0xf6, 0x7d }, new byte[] { 0x3d, 0xde, 0xd7, 0x5d, 0x30, 0x4e, 0x18, 0x5c, 0xb7, 0xf9, 0x9b, 0xe2, 0xac, 0x97, 0x91, 0x3f })]
        [InlineData(new byte[] { 0x07, 0x45, 0x19, 0x3f, 0x99, 0x2f, 0x6f, 0x7e, 0xa2, 0xfb, 0x7d, 0xdb, 0xa0, 0x82, 0x85, 0x71, 0xdc, 0xc9, 0x8c, 0xb5, 0x82, 0xdd, 0x05, 0xe1, 0xd0, 0x26, 0x57, 0x7a, 0x92, 0xb1, 0x56, 0x99 }, new byte[] { 0x07, 0x45, 0x19, 0x3f, 0x99, 0x2f, 0x6f, 0x7e, 0xa2, 0xfb, 0x7d, 0xdb, 0xa0, 0x82, 0x85, 0x71 }, new byte[] { 0xe4, 0x9e, 0xbb, 0xd9, 0xa7, 0x0e, 0x5b, 0xa1 }, new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 })]
        [InlineData(new byte[] { 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x07, 0x45, 0x19, 0x3f, 0x99, 0x2f, 0x6f, 0x7e, 0xa2, 0xfb, 0x7d, 0xdb, 0xa0, 0x82, 0x85, 0x71 }, new byte[] { 0xb2, 0x59, 0x65, 0x23, 0x3c, 0x91, 0x3c, 0x3d, 0xeb, 0x22, 0x2e, 0x79, 0x86, 0x68, 0x4c, 0xe6 }, new byte[] { 0x3d, 0xde, 0xd7, 0x5d, 0x30, 0x4e, 0x18, 0x5c, 0xb7, 0xf9, 0x9b, 0xe2, 0xac, 0x97, 0x91, 0x3f }, new byte[] { 0xe2, 0xc0, 0x8b, 0x2c, 0xaa, 0xc1, 0x4c, 0x46, 0xc8, 0x85, 0xc7, 0xb2, 0x1e, 0x24, 0xf6, 0x7d })]
        [InlineData(new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, new byte[] { 0x93, 0xb7, 0x9c, 0xc9, 0xea, 0x34, 0x75, 0x62 })]
        [InlineData(new byte[] { 0x06, 0x19, 0x3f, 0x99, 0x2f, 0xdc, 0xc9, 0x8c, 0xb5, 0x82, 0xdd, 0x05, 0xe1, 0xd0, 0x26, 0x99 }, new byte[] { 0x07, 0x45, 0x19, 0x3f, 0x99, 0x2f, 0x6f, 0x7e, 0xa2, 0xfb, 0x7d, 0xdb, 0xa0, 0x82, 0x85, 0x71 }, new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 }, new byte[] { 0x3b, 0xb0, 0xc2, 0x70, 0x83, 0x14, 0x09, 0x29 })]
        [InlineData(new byte[] { 0x07, 0x0A, 0x0B, 0x0C, 0x0D, 0x07, 0x45, 0x19, 0x3f, 0x99, 0x2f, 0x6f, 0x7e, 0xa2, 0xfb, 0x71 }, new byte[] { 0xb2, 0x59, 0x65, 0x23, 0x3c, 0x91, 0x3c, 0x3d, 0xeb, 0x22, 0x2e, 0x79, 0x86, 0x68, 0x4c, 0xe6 }, new byte[] { 0xe2, 0xc0, 0x8b, 0x2c, 0xaa, 0xc1, 0x4c, 0x46, 0xc8, 0x85, 0xc7, 0xb2, 0x1e, 0x24, 0xf6, 0x7d }, new byte[] { 0x9f, 0x43, 0xff, 0x3d, 0x27, 0x77, 0x78, 0x14, 0xc0, 0x3f, 0xdf, 0xf0, 0x67, 0xc3, 0xad, 0x3f })]
        [InlineData(new byte[] { 0x08, 0x19, 0x3f, 0x99, 0x2f, 0xdc, 0xc9, 0x8c, 0xb5, 0x82, 0xdd, 0x05, 0xe1, 0xd0, 0x26, 0x99 }, new byte[] { 0x07, 0x45, 0x19, 0x3f, 0x99, 0x2f, 0x6f, 0x7e, 0xa2, 0xfb, 0x7d, 0xdb, 0xa0, 0x82, 0x85, 0x71 }, new byte[] { 0xe4, 0x9e, 0xbb, 0xd9, 0xa7, 0x0e, 0x5b, 0xa1 }, new byte[] { 0x14, 0x73, 0x70, 0x52, 0x4f, 0xd7, 0x30, 0x4e })]
        [InlineData(new byte[] { 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x07, 0x45, 0x19, 0x3f, 0x99, 0x2f, 0x6f, 0x7e, 0xa2, 0xfb, 0x71 }, new byte[] { 0xb2, 0x59, 0x65, 0x23, 0x3c, 0x91, 0x3c, 0x3d, 0xeb, 0x22, 0x2e, 0x79, 0x86, 0x68, 0x4c, 0xe6 }, new byte[] { 0x3d, 0xde, 0xd7, 0x5d, 0x30, 0x4e, 0x18, 0x5c, 0xb7, 0xf9, 0x9b, 0xe2, 0xac, 0x97, 0x91, 0x3f }, new byte[] { 0x8b, 0xdd, 0x19, 0x6c, 0x69, 0x84, 0x16, 0xc8, 0x9e, 0xd8, 0x1e, 0xe3, 0x64, 0xcc, 0x17, 0xbd })]
        public void ReferenceTest(byte[] key, byte[] iv, byte[] input, byte[] output)
        {
            Cipher c = new Cipher();
            c.Initialize(key, iv);
            var encrypted = c.Encrypt(input);

            Debug.WriteLine($"{{{string.Join(", ", encrypted.Select(b => $"0x{b:x2}"))}}}");
            Assert.Equal(output, encrypted);
        }
    }
}
